
FourLineSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006380  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006530  08006530  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ac  2000000c  08006544  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  08006544  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c076  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  0002c0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdd9  00000000  00000000  0002ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfd7  00000000  00000000  0004bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5ffa  00000000  00000000  00057cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010dcc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  0010dd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064f0 	.word	0x080064f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080064f0 	.word	0x080064f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <JY901_genAskCmd>:
 */

#include "JY901_Interpreter.h"

void JY901_genAskCmd(uint8_t *cmd, int fre)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	cmd[0]=0xFF;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	701a      	strb	r2, [r3, #0]
	cmd[1]=0xAA;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	22aa      	movs	r2, #170	; 0xaa
 8000cc2:	701a      	strb	r2, [r3, #0]
	cmd[2]=0x03;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	701a      	strb	r2, [r3, #0]
	cmd[3]=0x0c;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3303      	adds	r3, #3
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	701a      	strb	r2, [r3, #0]
	cmd[4]=0x00;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	if (fre==200)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2bc8      	cmp	r3, #200	; 0xc8
 8000ce0:	d103      	bne.n	8000cea <JY901_genAskCmd+0x3e>
		cmd[3]=0x0b;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	220b      	movs	r2, #11
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <JY901_FBdecoder>:




int JY901_FBdecoder(uint8_t *recData, uint8_t *accData, uint8_t *omegaData, uint8_t *rpyData, uint8_t *IMU_data)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b087      	sub	sp, #28
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	603b      	str	r3, [r7, #0]
	uint16_t tmp=0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	82fb      	strh	r3, [r7, #22]
	int i;
	if (recData[0]!=0x55 || recData[1]!=0x51)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b55      	cmp	r3, #85	; 0x55
 8000d0e:	d104      	bne.n	8000d1a <JY901_FBdecoder+0x24>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b51      	cmp	r3, #81	; 0x51
 8000d18:	d001      	beq.n	8000d1e <JY901_FBdecoder+0x28>
		return 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e124      	b.n	8000f68 <JY901_FBdecoder+0x272>
	for (i=0;i<10;i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e00a      	b.n	8000d3a <JY901_FBdecoder+0x44>
		tmp+=recData[i];
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	4413      	add	r3, r2
 8000d32:	82fb      	strh	r3, [r7, #22]
	for (i=0;i<10;i++)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	ddf1      	ble.n	8000d24 <JY901_FBdecoder+0x2e>
	if (tmp%256!=recData[10])
 8000d40:	8afb      	ldrh	r3, [r7, #22]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	330a      	adds	r3, #10
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d001      	beq.n	8000d56 <JY901_FBdecoder+0x60>
		return 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e108      	b.n	8000f68 <JY901_FBdecoder+0x272>
	accData[0]=recData[2];
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	789a      	ldrb	r2, [r3, #2]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	701a      	strb	r2, [r3, #0]
	accData[1]=recData[3];
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	3301      	adds	r3, #1
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	78d2      	ldrb	r2, [r2, #3]
 8000d66:	701a      	strb	r2, [r3, #0]
	accData[2]=recData[4];
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	7912      	ldrb	r2, [r2, #4]
 8000d70:	701a      	strb	r2, [r3, #0]
	accData[3]=recData[5];
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3303      	adds	r3, #3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	7952      	ldrb	r2, [r2, #5]
 8000d7a:	701a      	strb	r2, [r3, #0]
	accData[4]=recData[6];
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	7992      	ldrb	r2, [r2, #6]
 8000d84:	701a      	strb	r2, [r3, #0]
	accData[5]=recData[7];
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	3305      	adds	r3, #5
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	79d2      	ldrb	r2, [r2, #7]
 8000d8e:	701a      	strb	r2, [r3, #0]
	IMU_data[0]=accData[0];
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	701a      	strb	r2, [r3, #0]
	IMU_data[1]=accData[1];
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	7852      	ldrb	r2, [r2, #1]
 8000da0:	701a      	strb	r2, [r3, #0]
	IMU_data[2]=accData[2];
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	3302      	adds	r3, #2
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	7892      	ldrb	r2, [r2, #2]
 8000daa:	701a      	strb	r2, [r3, #0]
	IMU_data[3]=accData[3];
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	3303      	adds	r3, #3
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	78d2      	ldrb	r2, [r2, #3]
 8000db4:	701a      	strb	r2, [r3, #0]
	IMU_data[4]=accData[4];
 8000db6:	6a3b      	ldr	r3, [r7, #32]
 8000db8:	3304      	adds	r3, #4
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	7912      	ldrb	r2, [r2, #4]
 8000dbe:	701a      	strb	r2, [r3, #0]
	IMU_data[5]=accData[5];
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	3305      	adds	r3, #5
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	7952      	ldrb	r2, [r2, #5]
 8000dc8:	701a      	strb	r2, [r3, #0]

	tmp=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	82fb      	strh	r3, [r7, #22]
	if (recData[11]!=0x55 || recData[12]!=0x52)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	330b      	adds	r3, #11
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b55      	cmp	r3, #85	; 0x55
 8000dd6:	d104      	bne.n	8000de2 <JY901_FBdecoder+0xec>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	330c      	adds	r3, #12
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b52      	cmp	r3, #82	; 0x52
 8000de0:	d001      	beq.n	8000de6 <JY901_FBdecoder+0xf0>
		return 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0c0      	b.n	8000f68 <JY901_FBdecoder+0x272>
	for (i=0;i<10;i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e00c      	b.n	8000e06 <JY901_FBdecoder+0x110>
		tmp+=recData[11+i];
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	330b      	adds	r3, #11
 8000df0:	461a      	mov	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	8afb      	ldrh	r3, [r7, #22]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	82fb      	strh	r3, [r7, #22]
	for (i=0;i<10;i++)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	3301      	adds	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	ddef      	ble.n	8000dec <JY901_FBdecoder+0xf6>
	if (tmp%256!=recData[21])
 8000e0c:	8afb      	ldrh	r3, [r7, #22]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3315      	adds	r3, #21
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d001      	beq.n	8000e22 <JY901_FBdecoder+0x12c>
		return 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0a2      	b.n	8000f68 <JY901_FBdecoder+0x272>
	omegaData[0]=recData[13];
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	7b5a      	ldrb	r2, [r3, #13]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	701a      	strb	r2, [r3, #0]
	omegaData[1]=recData[14];
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	7b92      	ldrb	r2, [r2, #14]
 8000e32:	701a      	strb	r2, [r3, #0]
	omegaData[2]=recData[15];
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3302      	adds	r3, #2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	7bd2      	ldrb	r2, [r2, #15]
 8000e3c:	701a      	strb	r2, [r3, #0]
	omegaData[3]=recData[16];
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3303      	adds	r3, #3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	7c12      	ldrb	r2, [r2, #16]
 8000e46:	701a      	strb	r2, [r3, #0]
	omegaData[4]=recData[17];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	7c52      	ldrb	r2, [r2, #17]
 8000e50:	701a      	strb	r2, [r3, #0]
	omegaData[5]=recData[18];
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3305      	adds	r3, #5
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	7c92      	ldrb	r2, [r2, #18]
 8000e5a:	701a      	strb	r2, [r3, #0]
	IMU_data[6]=omegaData[0];
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	3306      	adds	r3, #6
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	701a      	strb	r2, [r3, #0]
	IMU_data[7]=omegaData[1];
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	3307      	adds	r3, #7
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7852      	ldrb	r2, [r2, #1]
 8000e6e:	701a      	strb	r2, [r3, #0]
	IMU_data[8]=omegaData[2];
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	3308      	adds	r3, #8
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	7892      	ldrb	r2, [r2, #2]
 8000e78:	701a      	strb	r2, [r3, #0]
	IMU_data[9]=omegaData[3];
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	3309      	adds	r3, #9
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	78d2      	ldrb	r2, [r2, #3]
 8000e82:	701a      	strb	r2, [r3, #0]
	IMU_data[10]=omegaData[4];
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	330a      	adds	r3, #10
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	7912      	ldrb	r2, [r2, #4]
 8000e8c:	701a      	strb	r2, [r3, #0]
	IMU_data[11]=omegaData[5];
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	330b      	adds	r3, #11
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	7952      	ldrb	r2, [r2, #5]
 8000e96:	701a      	strb	r2, [r3, #0]

	tmp=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	82fb      	strh	r3, [r7, #22]
	if (recData[22]!=0x55 || recData[23]!=0x53)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3316      	adds	r3, #22
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b55      	cmp	r3, #85	; 0x55
 8000ea4:	d104      	bne.n	8000eb0 <JY901_FBdecoder+0x1ba>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3317      	adds	r3, #23
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b53      	cmp	r3, #83	; 0x53
 8000eae:	d001      	beq.n	8000eb4 <JY901_FBdecoder+0x1be>
		return 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e059      	b.n	8000f68 <JY901_FBdecoder+0x272>
	for (i=0;i<10;i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	e00c      	b.n	8000ed4 <JY901_FBdecoder+0x1de>
		tmp+=recData[22+i];
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	3316      	adds	r3, #22
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	8afb      	ldrh	r3, [r7, #22]
 8000eca:	4413      	add	r3, r2
 8000ecc:	82fb      	strh	r3, [r7, #22]
	for (i=0;i<10;i++)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	2b09      	cmp	r3, #9
 8000ed8:	ddef      	ble.n	8000eba <JY901_FBdecoder+0x1c4>
	if (tmp%256!=recData[32])
 8000eda:	8afb      	ldrh	r3, [r7, #22]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3320      	adds	r3, #32
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d001      	beq.n	8000ef0 <JY901_FBdecoder+0x1fa>
		return 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e03b      	b.n	8000f68 <JY901_FBdecoder+0x272>
	rpyData[0]=recData[24];
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	7e1a      	ldrb	r2, [r3, #24]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
	rpyData[1]=recData[25];
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	7e52      	ldrb	r2, [r2, #25]
 8000f00:	701a      	strb	r2, [r3, #0]
	rpyData[2]=recData[26];
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3302      	adds	r3, #2
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	7e92      	ldrb	r2, [r2, #26]
 8000f0a:	701a      	strb	r2, [r3, #0]
	rpyData[3]=recData[27];
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	3303      	adds	r3, #3
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	7ed2      	ldrb	r2, [r2, #27]
 8000f14:	701a      	strb	r2, [r3, #0]
	rpyData[4]=recData[28];
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	7f12      	ldrb	r2, [r2, #28]
 8000f1e:	701a      	strb	r2, [r3, #0]
	rpyData[5]=recData[29];
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3305      	adds	r3, #5
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	7f52      	ldrb	r2, [r2, #29]
 8000f28:	701a      	strb	r2, [r3, #0]
	IMU_data[12]=rpyData[0];
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	701a      	strb	r2, [r3, #0]
	IMU_data[13]=rpyData[1];
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	330d      	adds	r3, #13
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	7852      	ldrb	r2, [r2, #1]
 8000f3c:	701a      	strb	r2, [r3, #0]
	IMU_data[14]=rpyData[2];
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	330e      	adds	r3, #14
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	7892      	ldrb	r2, [r2, #2]
 8000f46:	701a      	strb	r2, [r3, #0]
	IMU_data[15]=rpyData[3];
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	330f      	adds	r3, #15
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	78d2      	ldrb	r2, [r2, #3]
 8000f50:	701a      	strb	r2, [r3, #0]
	IMU_data[16]=rpyData[4];
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	3310      	adds	r3, #16
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	7912      	ldrb	r2, [r2, #4]
 8000f5a:	701a      	strb	r2, [r3, #0]
	IMU_data[17]=rpyData[5];
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	3311      	adds	r3, #17
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	7952      	ldrb	r2, [r2, #5]
 8000f64:	701a      	strb	r2, [r3, #0]

	return 0;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <genAngleAskCmd>:
 */

#include "Servo_Interpreter.h"

void genAngleAskCmd(uint8_t id, uint8_t *cmd)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
	int tmp=0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
	int i=0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
	cmd[0]=0x12;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	701a      	strb	r2, [r3, #0]
	cmd[1]=0x4c;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	224c      	movs	r2, #76	; 0x4c
 8000f94:	701a      	strb	r2, [r3, #0]
	cmd[2]=10;     // command ID, 10 for angle read command, referred as READ_ANGLE in the mannual
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3302      	adds	r3, #2
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	701a      	strb	r2, [r3, #0]
	cmd[3]=1;    //  length of the data portion
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
	cmd[4]=id;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	701a      	strb	r2, [r3, #0]
	for (i=0;i<5;i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	e00a      	b.n	8000fca <genAngleAskCmd+0x56>
		tmp+=(int)cmd[i];
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
	for (i=0;i<5;i++)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	ddf1      	ble.n	8000fb4 <genAngleAskCmd+0x40>
	cmd[5]=tmp%256;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	425a      	negs	r2, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	bf58      	it	pl
 8000fda:	4253      	negpl	r3, r2
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	3205      	adds	r2, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	7013      	strb	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <recAngleCmdDecode>:

double recAngleCmdDecode(uint8_t id, uint8_t *dataOri, double angleOld)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	ed87 0b00 	vstr	d0, [r7]
 8000ffe:	73fb      	strb	r3, [r7, #15]
	uint8_t flag=0;
 8001000:	2300      	movs	r3, #0
 8001002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t check[5]={0x05,0x1c,0x0a,0x03,id};
 8001006:	2305      	movs	r3, #5
 8001008:	743b      	strb	r3, [r7, #16]
 800100a:	231c      	movs	r3, #28
 800100c:	747b      	strb	r3, [r7, #17]
 800100e:	230a      	movs	r3, #10
 8001010:	74bb      	strb	r3, [r7, #18]
 8001012:	2303      	movs	r3, #3
 8001014:	74fb      	strb	r3, [r7, #19]
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	753b      	strb	r3, [r7, #20]
	uint8_t checkSum,tmp;
	int16_t angleOri;
	int i;
	double angleNew;
	for (i=0;i<5;i++)
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
 800101e:	e010      	b.n	8001042 <recAngleCmdDecode+0x52>
		if (check[i]!=dataOri[i])
 8001020:	f107 0210 	add.w	r2, r7, #16
 8001024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001026:	4413      	add	r3, r2
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	440b      	add	r3, r1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d002      	beq.n	800103c <recAngleCmdDecode+0x4c>
			flag=1;
 8001036:	2301      	movs	r3, #1
 8001038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (i=0;i<5;i++)
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103e:	3301      	adds	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
 8001042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001044:	2b04      	cmp	r3, #4
 8001046:	ddeb      	ble.n	8001020 <recAngleCmdDecode+0x30>
	tmp=0;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i=0;i<7;i++)
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
 8001052:	e00b      	b.n	800106c <recAngleCmdDecode+0x7c>
		tmp+=(int)dataOri[i];
 8001054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	4413      	add	r3, r2
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001060:	4413      	add	r3, r2
 8001062:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i=0;i<7;i++)
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	3301      	adds	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	2b06      	cmp	r3, #6
 8001070:	ddf0      	ble.n	8001054 <recAngleCmdDecode+0x64>
	checkSum=tmp%256;
 8001072:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (checkSum!=dataOri[7])
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3307      	adds	r3, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001084:	429a      	cmp	r2, r3
 8001086:	d002      	beq.n	800108e <recAngleCmdDecode+0x9e>
		flag=1;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (flag==0)
 800108e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11b      	bne.n	80010ce <recAngleCmdDecode+0xde>
	{
		angleOri= (dataOri[6]<<8) | dataOri[5];
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3306      	adds	r3, #6
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3305      	adds	r3, #5
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		angleNew=angleOri/10.0;
 80010ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9db 	bl	800046c <__aeabi_i2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <recAngleCmdDecode+0xf4>)
 80010bc:	f7ff fb6a 	bl	8000794 <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		return angleNew;
 80010c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010cc:	e001      	b.n	80010d2 <recAngleCmdDecode+0xe2>
	}
	else
		return angleOld;
 80010ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80010d6:	eeb0 0a47 	vmov.f32	s0, s14
 80010da:	eef0 0a67 	vmov.f32	s1, s15
 80010de:	3730      	adds	r7, #48	; 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40240000 	.word	0x40240000

080010e8 <genSetAngleCmd>:
void genSetAngleCmd(uint8_t id, int16_t angle, uint16_t tD, uint16_t powD, uint8_t *cmd)
{
 80010e8:	b490      	push	{r4, r7}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	4603      	mov	r3, r0
 80010fc:	80bb      	strh	r3, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	803b      	strh	r3, [r7, #0]
	uint8_t angleLow, angleHigh;
	uint8_t tDLow, tDHigh;
	uint8_t powDLow, powDHigh;
	uint16_t tmp=0;
 8001106:	2300      	movs	r3, #0
 8001108:	82fb      	strh	r3, [r7, #22]
	int i;
	cmd[0]=0x12;
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	2212      	movs	r2, #18
 800110e:	701a      	strb	r2, [r3, #0]
	cmd[1]=0x4c;
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	3301      	adds	r3, #1
 8001114:	224c      	movs	r2, #76	; 0x4c
 8001116:	701a      	strb	r2, [r3, #0]
	cmd[2]=8; //command ID, 8 for angle control, referred as ROTATE in the manual
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	3302      	adds	r3, #2
 800111c:	2208      	movs	r2, #8
 800111e:	701a      	strb	r2, [r3, #0]
	cmd[3]=7; //length of the data portion
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	3303      	adds	r3, #3
 8001124:	2207      	movs	r2, #7
 8001126:	701a      	strb	r2, [r3, #0]
	cmd[4]=id;
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	3304      	adds	r3, #4
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	701a      	strb	r2, [r3, #0]
	angleLow=angle & 0xff;
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
	angleHigh=(angle>>8) & 0xff;
 8001134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001138:	121b      	asrs	r3, r3, #8
 800113a:	b21b      	sxth	r3, r3
 800113c:	73bb      	strb	r3, [r7, #14]
	cmd[5]=angleLow;
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	3305      	adds	r3, #5
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	701a      	strb	r2, [r3, #0]
	cmd[6]=angleHigh;
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	3306      	adds	r3, #6
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	701a      	strb	r2, [r3, #0]
	tDLow=tD & 0xff;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	737b      	strb	r3, [r7, #13]
	tDHigh= (tD>>8) & 0xff;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b29b      	uxth	r3, r3
 8001158:	733b      	strb	r3, [r7, #12]
	cmd[7]=tDLow;
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	3307      	adds	r3, #7
 800115e:	7b7a      	ldrb	r2, [r7, #13]
 8001160:	701a      	strb	r2, [r3, #0]
	cmd[8]=tDHigh;
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	3308      	adds	r3, #8
 8001166:	7b3a      	ldrb	r2, [r7, #12]
 8001168:	701a      	strb	r2, [r3, #0]
	powDLow=powD & 0xff;
 800116a:	883b      	ldrh	r3, [r7, #0]
 800116c:	72fb      	strb	r3, [r7, #11]
	powDHigh=(powD>>8) & 0xff;
 800116e:	883b      	ldrh	r3, [r7, #0]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	72bb      	strb	r3, [r7, #10]
	cmd[9]=powDLow;
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	3309      	adds	r3, #9
 800117a:	7afa      	ldrb	r2, [r7, #11]
 800117c:	701a      	strb	r2, [r3, #0]
	cmd[10]=powDHigh;
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	330a      	adds	r3, #10
 8001182:	7aba      	ldrb	r2, [r7, #10]
 8001184:	701a      	strb	r2, [r3, #0]
	for (i=0;i<11;i++)
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	e00a      	b.n	80011a2 <genSetAngleCmd+0xba>
		tmp+=(uint16_t)cmd[i];
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	8afb      	ldrh	r3, [r7, #22]
 8001198:	4413      	add	r3, r2
 800119a:	82fb      	strh	r3, [r7, #22]
	for (i=0;i<11;i++)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	3301      	adds	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	ddf1      	ble.n	800118c <genSetAngleCmd+0xa4>
	cmd[11]= tmp % 256;
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	330b      	adds	r3, #11
 80011ac:	8afa      	ldrh	r2, [r7, #22]
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <raspiCMDdecoder>:

#include "raspi_Interpreter.h"

int raspiCMDdecoder(uint8_t *cmd, uint8_t *readFlag, uint8_t *setFlag, uint8_t *idArray, uint8_t *servoNum, int16_t *angleArray, uint8_t *lineIdx)
// size(cmd)=60
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	uint8_t check=0x66; // check header
 80011ca:	2366      	movs	r3, #102	; 0x66
 80011cc:	74fb      	strb	r3, [r7, #19]
	uint16_t tmp=0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	83fb      	strh	r3, [r7, #30]
	uint8_t checksum;
	int i;
	int flag=0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

	for (i=0;i<59;i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	e00a      	b.n	80011f2 <raspiCMDdecoder+0x36>
		tmp+=cmd[i];
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	8bfb      	ldrh	r3, [r7, #30]
 80011e8:	4413      	add	r3, r2
 80011ea:	83fb      	strh	r3, [r7, #30]
	for (i=0;i<59;i++)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	3301      	adds	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b3a      	cmp	r3, #58	; 0x3a
 80011f6:	ddf1      	ble.n	80011dc <raspiCMDdecoder+0x20>
	checksum=tmp % 256;
 80011f8:	8bfb      	ldrh	r3, [r7, #30]
 80011fa:	74bb      	strb	r3, [r7, #18]
	if (checksum!=cmd[59])
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	333b      	adds	r3, #59	; 0x3b
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7cba      	ldrb	r2, [r7, #18]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <raspiCMDdecoder+0x50>
		flag=1;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
	if (check!=cmd[0])
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	7cfa      	ldrb	r2, [r7, #19]
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <raspiCMDdecoder+0x5e>
		flag=1;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
	if (flag==1)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <raspiCMDdecoder+0x68>
		return flag;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	e12d      	b.n	8001480 <raspiCMDdecoder+0x2c4>

	*servoNum=cmd[1]; // servo numbers on each active line
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	785a      	ldrb	r2, [r3, #1]
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	701a      	strb	r2, [r3, #0]

	// line choose and set and read flag choose
	switch(cmd[2]){
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3302      	adds	r3, #2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3b0a      	subs	r3, #10
 8001234:	2b2a      	cmp	r3, #42	; 0x2a
 8001236:	f200 80ef 	bhi.w	8001418 <raspiCMDdecoder+0x25c>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <raspiCMDdecoder+0x84>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012ed 	.word	0x080012ed
 8001244:	08001301 	.word	0x08001301
 8001248:	08001315 	.word	0x08001315
 800124c:	08001419 	.word	0x08001419
 8001250:	08001419 	.word	0x08001419
 8001254:	08001419 	.word	0x08001419
 8001258:	08001419 	.word	0x08001419
 800125c:	08001419 	.word	0x08001419
 8001260:	08001419 	.word	0x08001419
 8001264:	08001419 	.word	0x08001419
 8001268:	08001329 	.word	0x08001329
 800126c:	0800133d 	.word	0x0800133d
 8001270:	08001351 	.word	0x08001351
 8001274:	08001419 	.word	0x08001419
 8001278:	08001419 	.word	0x08001419
 800127c:	08001419 	.word	0x08001419
 8001280:	08001419 	.word	0x08001419
 8001284:	08001419 	.word	0x08001419
 8001288:	08001419 	.word	0x08001419
 800128c:	08001419 	.word	0x08001419
 8001290:	08001365 	.word	0x08001365
 8001294:	08001379 	.word	0x08001379
 8001298:	0800138d 	.word	0x0800138d
 800129c:	08001419 	.word	0x08001419
 80012a0:	08001419 	.word	0x08001419
 80012a4:	08001419 	.word	0x08001419
 80012a8:	08001419 	.word	0x08001419
 80012ac:	08001419 	.word	0x08001419
 80012b0:	08001419 	.word	0x08001419
 80012b4:	08001419 	.word	0x08001419
 80012b8:	080013a1 	.word	0x080013a1
 80012bc:	080013b5 	.word	0x080013b5
 80012c0:	080013c9 	.word	0x080013c9
 80012c4:	08001419 	.word	0x08001419
 80012c8:	08001419 	.word	0x08001419
 80012cc:	08001419 	.word	0x08001419
 80012d0:	08001419 	.word	0x08001419
 80012d4:	08001419 	.word	0x08001419
 80012d8:	08001419 	.word	0x08001419
 80012dc:	08001419 	.word	0x08001419
 80012e0:	080013dd 	.word	0x080013dd
 80012e4:	080013f1 	.word	0x080013f1
 80012e8:	08001405 	.word	0x08001405
	case 10: *readFlag=1; *setFlag=0; *lineIdx=1; break; // enable line 1
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e094      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 11: *readFlag=0; *setFlag=1; *lineIdx=1; break;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e08a      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 12: *readFlag=1; *setFlag=1; *lineIdx=1; break;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e080      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 20: *readFlag=1; *setFlag=0; *lineIdx=2; break; // enable line 2
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	2202      	movs	r2, #2
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e076      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 21: *readFlag=0; *setFlag=1; *lineIdx=2; break;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e06c      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 22: *readFlag=1; *setFlag=1; *lineIdx=2; break;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e062      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 30: *readFlag=1; *setFlag=0; *lineIdx=3; break; // enable line 3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001372:	2203      	movs	r2, #3
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e058      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 31: *readFlag=0; *setFlag=1; *lineIdx=3; break;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	2203      	movs	r2, #3
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e04e      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 32: *readFlag=1; *setFlag=1; *lineIdx=3; break;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139a:	2203      	movs	r2, #3
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e044      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 40: *readFlag=1; *setFlag=0; *lineIdx=4; break; // enable line 4
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ae:	2204      	movs	r2, #4
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e03a      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 41: *readFlag=0; *setFlag=1; *lineIdx=4; break;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c2:	2204      	movs	r2, #4
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e030      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 42: *readFlag=1; *setFlag=1; *lineIdx=4; break;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d6:	2204      	movs	r2, #4
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e026      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 50: *readFlag=1; *setFlag=0; *lineIdx=5; break; // enable line 1-4
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ea:	2205      	movs	r2, #5
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e01c      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 51: *readFlag=0; *setFlag=1; *lineIdx=5; break;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fe:	2205      	movs	r2, #5
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e012      	b.n	800142a <raspiCMDdecoder+0x26e>
	case 52: *readFlag=1; *setFlag=1; *lineIdx=5; break;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e008      	b.n	800142a <raspiCMDdecoder+0x26e>
	default: *readFlag=0; *setFlag=0; *lineIdx=1;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	else if (cmd[2]==2)
	{*readFlag=1; *setFlag=1;}
	else
	{*readFlag=0; *setFlag=0;}*/

	for (i=0;i<12;i++)
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e023      	b.n	8001478 <raspiCMDdecoder+0x2bc>
	{
		idArray[i]=cmd[3+i];
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	3303      	adds	r3, #3
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	441a      	add	r2, r3
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	440b      	add	r3, r1
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	701a      	strb	r2, [r3, #0]
		angleArray[i]=(cmd[15+i*2+1]<<8) | cmd[15+i*2];
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	3310      	adds	r3, #16
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b219      	sxth	r1, r3
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	330f      	adds	r3, #15
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b21a      	sxth	r2, r3
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800146a:	4403      	add	r3, r0
 800146c:	430a      	orrs	r2, r1
 800146e:	b212      	sxth	r2, r2
 8001470:	801a      	strh	r2, [r3, #0]
	for (i=0;i<12;i++)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3301      	adds	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0b      	cmp	r3, #11
 800147c:	ddd8      	ble.n	8001430 <raspiCMDdecoder+0x274>
	}

	return flag;
 800147e:	697b      	ldr	r3, [r7, #20]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3724      	adds	r7, #36	; 0x24
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <genAngleBackCmd>:
}


void genAngleBackCmd(uint8_t *idArray, uint8_t servoNum, int16_t *readAngle, uint8_t *cmd, uint8_t *IMU_data)
// size(cmd)=60
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	460b      	mov	r3, r1
 800149a:	72fb      	strb	r3, [r7, #11]
	cmd[0]=0x66;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2266      	movs	r2, #102	; 0x66
 80014a0:	701a      	strb	r2, [r3, #0]
	cmd[1]=servoNum;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	7afa      	ldrb	r2, [r7, #11]
 80014a8:	701a      	strb	r2, [r3, #0]
	int i;
	uint8_t low8, high8;
	uint16_t tmp=0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	827b      	strh	r3, [r7, #18]
	for (i=0;i<12;i++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e02b      	b.n	800150c <genAngleBackCmd+0x80>
	{
		cmd[2+i]=idArray[i];
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	441a      	add	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3302      	adds	r3, #2
 80014be:	4619      	mov	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	440b      	add	r3, r1
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
		low8=readAngle[i] & 0xff;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	747b      	strb	r3, [r7, #17]
		high8=(readAngle[i]>>8) & 0xff;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	121b      	asrs	r3, r3, #8
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	743b      	strb	r3, [r7, #16]
		cmd[14+i*2]=low8;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3307      	adds	r3, #7
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	461a      	mov	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	7c7a      	ldrb	r2, [r7, #17]
 80014f6:	701a      	strb	r2, [r3, #0]
		cmd[14+i*2+1]=high8;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	330f      	adds	r3, #15
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	7c3a      	ldrb	r2, [r7, #16]
 8001504:	701a      	strb	r2, [r3, #0]
	for (i=0;i<12;i++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b0b      	cmp	r3, #11
 8001510:	ddd0      	ble.n	80014b4 <genAngleBackCmd+0x28>
	}
	for (i=0;i<18;i++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e00c      	b.n	8001532 <genAngleBackCmd+0xa6>
	{
		cmd[38+i]=IMU_data[i];
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	6a3a      	ldr	r2, [r7, #32]
 800151c:	441a      	add	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3326      	adds	r3, #38	; 0x26
 8001522:	4619      	mov	r1, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	440b      	add	r3, r1
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b11      	cmp	r3, #17
 8001536:	ddef      	ble.n	8001518 <genAngleBackCmd+0x8c>
	}
	for (i=0;i<59;i++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <genAngleBackCmd+0xc8>
		tmp+=cmd[i];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b29a      	uxth	r2, r3
 8001548:	8a7b      	ldrh	r3, [r7, #18]
 800154a:	4413      	add	r3, r2
 800154c:	827b      	strh	r3, [r7, #18]
	for (i=0;i<59;i++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b3a      	cmp	r3, #58	; 0x3a
 8001558:	ddf1      	ble.n	800153e <genAngleBackCmd+0xb2>
	cmd[59]=tmp % 256;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	333b      	adds	r3, #59	; 0x3b
 800155e:	8a7a      	ldrh	r2, [r7, #18]
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_UART_TxCpltCallback>:
volatile int readFinish=0;

volatile int LEDcountV2=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_TxCpltCallback+0x6c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <HAL_UART_TxCpltCallback+0x1a>
		uartTxFlag[0]=1;
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_UART_TxCpltCallback+0x70>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
	else if (huart->Instance==UART5)
		uartTxFlag[3]=1;
	else if (huart->Instance==UART4)
		uartTxFlag[4]=1;

}
 8001588:	e022      	b.n	80015d0 <HAL_UART_TxCpltCallback+0x60>
	else if (huart->Instance==USART2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_UART_TxCpltCallback+0x74>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d103      	bne.n	800159c <HAL_UART_TxCpltCallback+0x2c>
		uartTxFlag[1]=1;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_UART_TxCpltCallback+0x70>)
 8001596:	2201      	movs	r2, #1
 8001598:	705a      	strb	r2, [r3, #1]
}
 800159a:	e019      	b.n	80015d0 <HAL_UART_TxCpltCallback+0x60>
	else if (huart->Instance==USART3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_UART_TxCpltCallback+0x78>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d103      	bne.n	80015ae <HAL_UART_TxCpltCallback+0x3e>
		uartTxFlag[2]=1;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_UART_TxCpltCallback+0x70>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	709a      	strb	r2, [r3, #2]
}
 80015ac:	e010      	b.n	80015d0 <HAL_UART_TxCpltCallback+0x60>
	else if (huart->Instance==UART5)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_UART_TxCpltCallback+0x7c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d103      	bne.n	80015c0 <HAL_UART_TxCpltCallback+0x50>
		uartTxFlag[3]=1;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_UART_TxCpltCallback+0x70>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	70da      	strb	r2, [r3, #3]
}
 80015be:	e007      	b.n	80015d0 <HAL_UART_TxCpltCallback+0x60>
	else if (huart->Instance==UART4)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_UART_TxCpltCallback+0x80>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d102      	bne.n	80015d0 <HAL_UART_TxCpltCallback+0x60>
		uartTxFlag[4]=1;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_UART_TxCpltCallback+0x70>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	711a      	strb	r2, [r3, #4]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40011000 	.word	0x40011000
 80015e0:	200008d0 	.word	0x200008d0
 80015e4:	40004400 	.word	0x40004400
 80015e8:	40004800 	.word	0x40004800
 80015ec:	40005000 	.word	0x40005000
 80015f0:	40004c00 	.word	0x40004c00

080015f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_UART_RxCpltCallback+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d102      	bne.n	800160c <HAL_UART_RxCpltCallback+0x18>
		uartRxFlag[0]=1;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_UART_RxCpltCallback+0x80>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
	if (huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_UART_RxCpltCallback+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d102      	bne.n	800161c <HAL_UART_RxCpltCallback+0x28>
		uartRxFlag[1]=1;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_UART_RxCpltCallback+0x80>)
 8001618:	2201      	movs	r2, #1
 800161a:	705a      	strb	r2, [r3, #1]
	if (huart->Instance==USART3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_UART_RxCpltCallback+0x88>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d102      	bne.n	800162c <HAL_UART_RxCpltCallback+0x38>
		uartRxFlag[2]=1;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_UART_RxCpltCallback+0x80>)
 8001628:	2201      	movs	r2, #1
 800162a:	709a      	strb	r2, [r3, #2]
	if (huart->Instance==UART5)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <HAL_UART_RxCpltCallback+0x8c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d102      	bne.n	800163c <HAL_UART_RxCpltCallback+0x48>
		uartRxFlag[3]=1;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_UART_RxCpltCallback+0x80>)
 8001638:	2201      	movs	r2, #1
 800163a:	70da      	strb	r2, [r3, #3]
	if (huart->Instance==UART4)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_UART_RxCpltCallback+0x90>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10f      	bne.n	8001666 <HAL_UART_RxCpltCallback+0x72>
	{
		HAL_UART_Receive_DMA(&huart4, imuRecData,33);uartRxFlag[4]=1;JY901_FBdecoder(imuRecData, accData, omegaData, rpyData, IMU_data);} // for JY901
 8001646:	2221      	movs	r2, #33	; 0x21
 8001648:	490f      	ldr	r1, [pc, #60]	; (8001688 <HAL_UART_RxCpltCallback+0x94>)
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <HAL_UART_RxCpltCallback+0x98>)
 800164c:	f003 fe60 	bl	8005310 <HAL_UART_Receive_DMA>
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_UART_RxCpltCallback+0x80>)
 8001652:	2201      	movs	r2, #1
 8001654:	711a      	strb	r2, [r3, #4]
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_UART_RxCpltCallback+0x9c>)
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_UART_RxCpltCallback+0xa0>)
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_UART_RxCpltCallback+0xa4>)
 800165e:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_UART_RxCpltCallback+0xa8>)
 8001660:	4809      	ldr	r0, [pc, #36]	; (8001688 <HAL_UART_RxCpltCallback+0x94>)
 8001662:	f7ff fb48 	bl	8000cf6 <JY901_FBdecoder>
	/*{//HAL_UART_Receive_DMA(&huart4, imuRecData_CH100,164);
	uartRxFlag[4]=1;
	CH100_FBdecoder(imuRecData_CH100, accData_CH100, omegaData_CH100, quatData_CH100, IMU_CH100_data);} // for CH100*/
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40011000 	.word	0x40011000
 8001674:	20000700 	.word	0x20000700
 8001678:	40004400 	.word	0x40004400
 800167c:	40004800 	.word	0x40004800
 8001680:	40005000 	.word	0x40005000
 8001684:	40004c00 	.word	0x40004c00
 8001688:	20000600 	.word	0x20000600
 800168c:	20000664 	.word	0x20000664
 8001690:	20000854 	.word	0x20000854
 8001694:	2000027c 	.word	0x2000027c
 8001698:	20000230 	.word	0x20000230
 800169c:	200008c8 	.word	0x200008c8

080016a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d036      	beq.n	800171e <HAL_UART_ErrorCallback+0x7e>
    {
        //ERR_TRACE0("baseaddr = 0x%x, error code = 0x%x", huart->Instance, huart->ErrorCode);

        __HAL_UART_CLEAR_NEFLAG(huart);
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        //__HAL_UART_CLEAR_OREFLAG(huart);

        huart->RxState = HAL_UART_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	if (huart->Instance==USART1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_UART_ErrorCallback+0x8c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d102      	bne.n	80016de <HAL_UART_ErrorCallback+0x3e>
		uartRxFlag[0]=1;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_UART_ErrorCallback+0x90>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
	if (huart->Instance==USART2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_UART_ErrorCallback+0x94>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d102      	bne.n	80016ee <HAL_UART_ErrorCallback+0x4e>
		uartRxFlag[1]=1;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_UART_ErrorCallback+0x90>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	705a      	strb	r2, [r3, #1]
	if (huart->Instance==USART3)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_UART_ErrorCallback+0x98>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d102      	bne.n	80016fe <HAL_UART_ErrorCallback+0x5e>
		uartRxFlag[2]=1;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_UART_ErrorCallback+0x90>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	709a      	strb	r2, [r3, #2]
	if (huart->Instance==UART5)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_UART_ErrorCallback+0x9c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d102      	bne.n	800170e <HAL_UART_ErrorCallback+0x6e>
		uartRxFlag[3]=1;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_UART_ErrorCallback+0x90>)
 800170a:	2201      	movs	r2, #1
 800170c:	70da      	strb	r2, [r3, #3]
	if (huart->Instance==UART4)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_UART_ErrorCallback+0xa0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_UART_ErrorCallback+0x7e>
		uartRxFlag[4]=1;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_UART_ErrorCallback+0x90>)
 800171a:	2201      	movs	r2, #1
 800171c:	711a      	strb	r2, [r3, #4]
    }
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40011000 	.word	0x40011000
 8001730:	20000700 	.word	0x20000700
 8001734:	40004400 	.word	0x40004400
 8001738:	40004800 	.word	0x40004800
 800173c:	40005000 	.word	0x40005000
 8001740:	40004c00 	.word	0x40004c00

08001744 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	getRaspiCMD=1;
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0x38>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
	LEDcountV2++;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001786:	6013      	str	r3, [r2, #0]
	if (LEDcountV2>10)
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_SPI_TxRxCpltCallback+0x3c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b0a      	cmp	r3, #10
 800178e:	dd06      	ble.n	800179e <HAL_SPI_TxRxCpltCallback+0x2e>
		{HAL_GPIO_TogglePin(LED_Onboard_GPIO_Port, LED_Onboard_Pin);LEDcountV2=0;}
 8001790:	2101      	movs	r1, #1
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <HAL_SPI_TxRxCpltCallback+0x40>)
 8001794:	f002 fb09 	bl	8003daa <HAL_GPIO_TogglePin>
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_SPI_TxRxCpltCallback+0x3c>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000028 	.word	0x20000028
 80017ac:	20000038 	.word	0x20000038
 80017b0:	40020000 	.word	0x40020000

080017b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b08d      	sub	sp, #52	; 0x34
 80017b8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  int ii=0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  uint8_t imu_unlock[5];
  for (ii=0;ii<60;ii++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e007      	b.n	80017d4 <main+0x20>
  	spiSendData[ii]=0;
 80017c4:	4aac      	ldr	r2, [pc, #688]	; (8001a78 <main+0x2c4>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
  for (ii=0;ii<60;ii++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b3b      	cmp	r3, #59	; 0x3b
 80017d8:	ddf4      	ble.n	80017c4 <main+0x10>
  uartTxFlag[0]=1;uartTxFlag[1]=1;uartTxFlag[2]=1;uartTxFlag[3]=1;uartTxFlag[4]=1;
 80017da:	4ba8      	ldr	r3, [pc, #672]	; (8001a7c <main+0x2c8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	4ba6      	ldr	r3, [pc, #664]	; (8001a7c <main+0x2c8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	705a      	strb	r2, [r3, #1]
 80017e6:	4ba5      	ldr	r3, [pc, #660]	; (8001a7c <main+0x2c8>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	709a      	strb	r2, [r3, #2]
 80017ec:	4ba3      	ldr	r3, [pc, #652]	; (8001a7c <main+0x2c8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	70da      	strb	r2, [r3, #3]
 80017f2:	4ba2      	ldr	r3, [pc, #648]	; (8001a7c <main+0x2c8>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	711a      	strb	r2, [r3, #4]
  uartRxFlag[0]=1;uartRxFlag[1]=1;uartRxFlag[2]=1;uartRxFlag[3]=1;uartRxFlag[4]=1;
 80017f8:	4ba1      	ldr	r3, [pc, #644]	; (8001a80 <main+0x2cc>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	4ba0      	ldr	r3, [pc, #640]	; (8001a80 <main+0x2cc>)
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
 8001804:	4b9e      	ldr	r3, [pc, #632]	; (8001a80 <main+0x2cc>)
 8001806:	2201      	movs	r2, #1
 8001808:	709a      	strb	r2, [r3, #2]
 800180a:	4b9d      	ldr	r3, [pc, #628]	; (8001a80 <main+0x2cc>)
 800180c:	2201      	movs	r2, #1
 800180e:	70da      	strb	r2, [r3, #3]
 8001810:	4b9b      	ldr	r3, [pc, #620]	; (8001a80 <main+0x2cc>)
 8001812:	2201      	movs	r2, #1
 8001814:	711a      	strb	r2, [r3, #4]
  imu_unlock[0]=0xff;imu_unlock[1]=0xaa;imu_unlock[2]=0x69;imu_unlock[3]=0x88;imu_unlock[4]=0xb5;
 8001816:	23ff      	movs	r3, #255	; 0xff
 8001818:	723b      	strb	r3, [r7, #8]
 800181a:	23aa      	movs	r3, #170	; 0xaa
 800181c:	727b      	strb	r3, [r7, #9]
 800181e:	2369      	movs	r3, #105	; 0x69
 8001820:	72bb      	strb	r3, [r7, #10]
 8001822:	2388      	movs	r3, #136	; 0x88
 8001824:	72fb      	strb	r3, [r7, #11]
 8001826:	23b5      	movs	r3, #181	; 0xb5
 8001828:	733b      	strb	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182a:	f001 fb5f 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182e:	f000 fb69 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001832:	f000 fd5b 	bl	80022ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001836:	f000 fcd3 	bl	80021e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800183a:	f000 fc53 	bl	80020e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800183e:	f000 fc7b 	bl	8002138 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001842:	f000 fca3 	bl	800218c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001846:	f000 fbc7 	bl	8001fd8 <MX_SPI1_Init>
  MX_UART4_Init();
 800184a:	f000 fbf7 	bl	800203c <MX_UART4_Init>
  MX_UART5_Init();
 800184e:	f000 fc1f 	bl	8002090 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_Onboard_GPIO_Port, LED_Onboard_Pin,GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	488b      	ldr	r0, [pc, #556]	; (8001a84 <main+0x2d0>)
 8001858:	f002 fa8e 	bl	8003d78 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(WorkState_GPIO_Port, WorkState_Pin,GPIO_PIN_RESET);
  HAL_SPI_TransmitReceive_DMA(&hspi1, spiSendData, spiRecData, 60);
 800185c:	233c      	movs	r3, #60	; 0x3c
 800185e:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <main+0x2d4>)
 8001860:	4985      	ldr	r1, [pc, #532]	; (8001a78 <main+0x2c4>)
 8001862:	488a      	ldr	r0, [pc, #552]	; (8001a8c <main+0x2d8>)
 8001864:	f002 ffba 	bl	80047dc <HAL_SPI_TransmitReceive_DMA>

  HAL_UART_Receive_DMA(&huart1, servoAngleRecCmdL1, 8);
 8001868:	2208      	movs	r2, #8
 800186a:	4989      	ldr	r1, [pc, #548]	; (8001a90 <main+0x2dc>)
 800186c:	4889      	ldr	r0, [pc, #548]	; (8001a94 <main+0x2e0>)
 800186e:	f003 fd4f 	bl	8005310 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, servoAngleRecCmdL2, 8);
 8001872:	2208      	movs	r2, #8
 8001874:	4988      	ldr	r1, [pc, #544]	; (8001a98 <main+0x2e4>)
 8001876:	4889      	ldr	r0, [pc, #548]	; (8001a9c <main+0x2e8>)
 8001878:	f003 fd4a 	bl	8005310 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, servoAngleRecCmdL3, 8);
 800187c:	2208      	movs	r2, #8
 800187e:	4988      	ldr	r1, [pc, #544]	; (8001aa0 <main+0x2ec>)
 8001880:	4888      	ldr	r0, [pc, #544]	; (8001aa4 <main+0x2f0>)
 8001882:	f003 fd45 	bl	8005310 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, servoAngleRecCmdL4, 8);
 8001886:	2208      	movs	r2, #8
 8001888:	4987      	ldr	r1, [pc, #540]	; (8001aa8 <main+0x2f4>)
 800188a:	4888      	ldr	r0, [pc, #544]	; (8001aac <main+0x2f8>)
 800188c:	f003 fd40 	bl	8005310 <HAL_UART_Receive_DMA>

  // IMU initialization for JY901
  uartRxFlag[4]=0;
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <main+0x2cc>)
 8001892:	2200      	movs	r2, #0
 8001894:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart4, imu_unlock,5,1000);
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	2205      	movs	r2, #5
 80018a0:	4883      	ldr	r0, [pc, #524]	; (8001ab0 <main+0x2fc>)
 80018a2:	f003 fc24 	bl	80050ee <HAL_UART_Transmit>
  HAL_Delay(20);
 80018a6:	2014      	movs	r0, #20
 80018a8:	f001 fb92 	bl	8002fd0 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart4, imuRecData,33);
 80018ac:	2221      	movs	r2, #33	; 0x21
 80018ae:	4981      	ldr	r1, [pc, #516]	; (8001ab4 <main+0x300>)
 80018b0:	487f      	ldr	r0, [pc, #508]	; (8001ab0 <main+0x2fc>)
 80018b2:	f003 fd2d 	bl	8005310 <HAL_UART_Receive_DMA>
  JY901_genAskCmd(imuAskData,1); // for single time output, to clear the uart
 80018b6:	2101      	movs	r1, #1
 80018b8:	487f      	ldr	r0, [pc, #508]	; (8001ab8 <main+0x304>)
 80018ba:	f7ff f9f7 	bl	8000cac <JY901_genAskCmd>
  HAL_UART_Transmit(&huart4, imuAskData,5,1000);
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	2205      	movs	r2, #5
 80018c4:	497c      	ldr	r1, [pc, #496]	; (8001ab8 <main+0x304>)
 80018c6:	487a      	ldr	r0, [pc, #488]	; (8001ab0 <main+0x2fc>)
 80018c8:	f003 fc11 	bl	80050ee <HAL_UART_Transmit>
  HAL_Delay(20);
 80018cc:	2014      	movs	r0, #20
 80018ce:	f001 fb7f 	bl	8002fd0 <HAL_Delay>
  while(uartRxFlag[4]==0);
 80018d2:	bf00      	nop
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <main+0x2cc>)
 80018d6:	791b      	ldrb	r3, [r3, #4]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0fa      	beq.n	80018d4 <main+0x120>

  uartRxFlag[4]=0;
 80018de:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <main+0x2cc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	711a      	strb	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart4, imuRecData,33);
 80018e4:	2221      	movs	r2, #33	; 0x21
 80018e6:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <main+0x300>)
 80018e8:	4871      	ldr	r0, [pc, #452]	; (8001ab0 <main+0x2fc>)
 80018ea:	f003 fd11 	bl	8005310 <HAL_UART_Receive_DMA>
  JY901_genAskCmd(imuAskData,200); // for 200 Hz continuous output
 80018ee:	21c8      	movs	r1, #200	; 0xc8
 80018f0:	4871      	ldr	r0, [pc, #452]	; (8001ab8 <main+0x304>)
 80018f2:	f7ff f9db 	bl	8000cac <JY901_genAskCmd>
  HAL_UART_Transmit(&huart4, imuAskData,5,1000);
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	2205      	movs	r2, #5
 80018fc:	496e      	ldr	r1, [pc, #440]	; (8001ab8 <main+0x304>)
 80018fe:	486c      	ldr	r0, [pc, #432]	; (8001ab0 <main+0x2fc>)
 8001900:	f003 fbf5 	bl	80050ee <HAL_UART_Transmit>
  HAL_Delay(20);
 8001904:	2014      	movs	r0, #20
 8001906:	f001 fb63 	bl	8002fd0 <HAL_Delay>
		  getRaspiCMD=1;
	  else
		  {getRaspiCMD=0;HAL_Delay(1);}*/


	  if (getRaspiCMD==1)
 800190a:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <main+0x308>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d1fa      	bne.n	800190a <main+0x156>
		  /*uartRxFlag[4]=0;
		  HAL_UART_Receive_DMA(&huart4, imuRecData,33);
		  JY901_genAskCmd(imuAskData,1);
		  HAL_UART_Transmit(&huart4, imuAskData,5,1000);*/
		  //HAL_GPIO_WritePin(WorkState_GPIO_Port, WorkState_Pin,GPIO_PIN_RESET);
		  setFinish=0;
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <main+0x30c>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
		  readFinish=0;
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <main+0x310>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
		  volatile int i;
		  double angleres;
		  //raspiRecErr=raspiCMDdecoder_CH100(spiRecData_CH100, &raspiReadFlag, &raspiSetFlag, servoIDarray, &servoNum,servoAngleSet,&lineIdx);
		  raspiRecErr=raspiCMDdecoder(spiRecData, &raspiReadFlag, &raspiSetFlag, servoIDarray, &servoNum,servoAngleSet,&lineIdx);
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <main+0x314>)
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	4b69      	ldr	r3, [pc, #420]	; (8001acc <main+0x318>)
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <main+0x31c>)
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <main+0x320>)
 800192e:	4a6a      	ldr	r2, [pc, #424]	; (8001ad8 <main+0x324>)
 8001930:	496a      	ldr	r1, [pc, #424]	; (8001adc <main+0x328>)
 8001932:	4855      	ldr	r0, [pc, #340]	; (8001a88 <main+0x2d4>)
 8001934:	f7ff fc42 	bl	80011bc <raspiCMDdecoder>
 8001938:	4603      	mov	r3, r0
 800193a:	4a69      	ldr	r2, [pc, #420]	; (8001ae0 <main+0x32c>)
 800193c:	6013      	str	r3, [r2, #0]
		  lineFlag[0]=0;lineFlag[1]=0;lineFlag[2]=0;lineFlag[3]=0;
 800193e:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <main+0x330>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <main+0x330>)
 8001946:	2200      	movs	r2, #0
 8001948:	705a      	strb	r2, [r3, #1]
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <main+0x330>)
 800194c:	2200      	movs	r2, #0
 800194e:	709a      	strb	r2, [r3, #2]
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <main+0x330>)
 8001952:	2200      	movs	r2, #0
 8001954:	70da      	strb	r2, [r3, #3]
		  if (lineIdx==1)
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <main+0x314>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d103      	bne.n	8001966 <main+0x1b2>
				  lineFlag[0]=1;
 800195e:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <main+0x330>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e027      	b.n	80019b6 <main+0x202>
		  else if (lineIdx==2)
 8001966:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <main+0x314>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d103      	bne.n	8001976 <main+0x1c2>
				  lineFlag[1]=1;
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <main+0x330>)
 8001970:	2201      	movs	r2, #1
 8001972:	705a      	strb	r2, [r3, #1]
 8001974:	e01f      	b.n	80019b6 <main+0x202>
		  else if (lineIdx==3)
 8001976:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <main+0x314>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d103      	bne.n	8001986 <main+0x1d2>
				  lineFlag[2]=1;
 800197e:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <main+0x330>)
 8001980:	2201      	movs	r2, #1
 8001982:	709a      	strb	r2, [r3, #2]
 8001984:	e017      	b.n	80019b6 <main+0x202>
		  else if (lineIdx==4)
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <main+0x314>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d103      	bne.n	8001996 <main+0x1e2>
				  lineFlag[3]=1;
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <main+0x330>)
 8001990:	2201      	movs	r2, #1
 8001992:	70da      	strb	r2, [r3, #3]
 8001994:	e00f      	b.n	80019b6 <main+0x202>
		  else if (lineIdx==5)
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <main+0x314>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b05      	cmp	r3, #5
 800199c:	d10b      	bne.n	80019b6 <main+0x202>
				  {lineFlag[0]=1;lineFlag[1]=1;lineFlag[2]=1;lineFlag[3]=1;}
 800199e:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <main+0x330>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <main+0x330>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	705a      	strb	r2, [r3, #1]
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <main+0x330>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	709a      	strb	r2, [r3, #2]
 80019b0:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <main+0x330>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	70da      	strb	r2, [r3, #3]
		  //{lineFlag[1]=1;lineFlag[2]=1;}
		  if (raspiSetFlag==1)
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <main+0x324>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 80d9 	bne.w	8001b72 <main+0x3be>
		  {

		  	  for (i=0;i<servoNum;i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	e0ce      	b.n	8001b64 <main+0x3b0>
		  	  {
		  		  //genSetAngleCmd(servoIDarray[i], servoAngleSet[i], 0, 0, servoAngleSetCmd);
		    	  //uartTxFlag[0]=0;
		  		  //setSendFlag[i]=HAL_UART_Transmit_IT(&huart1, servoAngleSetCmd, 12);
		  		  //while(uartTxFlag[0]==0);
 				  if (lineFlag[0]==1)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <main+0x330>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d115      	bne.n	80019fa <main+0x246>
 				  {
 					  //while(uartTxFlag[0]==0){};
 					  genSetAngleCmd(servoIDarray[i], servoAngleSet[i], 0, 0, servoAngleSetCmdL1);uartTxFlag[0]=0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <main+0x320>)
 80019d2:	5cd0      	ldrb	r0, [r2, r3]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <main+0x318>)
 80019d8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80019dc:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <main+0x334>)
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2300      	movs	r3, #0
 80019e2:	2200      	movs	r2, #0
 80019e4:	f7ff fb80 	bl	80010e8 <genSetAngleCmd>
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <main+0x2c8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 					  HAL_UART_Transmit_DMA(&huart1, servoAngleSetCmdL1,12);
 80019ee:	220c      	movs	r2, #12
 80019f0:	493d      	ldr	r1, [pc, #244]	; (8001ae8 <main+0x334>)
 80019f2:	4828      	ldr	r0, [pc, #160]	; (8001a94 <main+0x2e0>)
 80019f4:	f003 fc0e 	bl	8005214 <HAL_UART_Transmit_DMA>
 80019f8:	e002      	b.n	8001a00 <main+0x24c>
 					  //while(uartTxFlag[0]==0);
 				  }
 				  else
 					  uartTxFlag[0]=1;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <main+0x2c8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]

 				  if (lineFlag[1]==1)
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <main+0x330>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d117      	bne.n	8001a38 <main+0x284>
 				  {
 					 //while(uartTxFlag[1]==0){};
 					  genSetAngleCmd(servoIDarray[i+3], servoAngleSet[i+3], 0, 0, servoAngleSetCmdL2);uartTxFlag[1]=0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3303      	adds	r3, #3
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <main+0x320>)
 8001a0e:	5cd0      	ldrb	r0, [r2, r3]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3303      	adds	r3, #3
 8001a14:	4a2d      	ldr	r2, [pc, #180]	; (8001acc <main+0x318>)
 8001a16:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <main+0x338>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2200      	movs	r2, #0
 8001a22:	f7ff fb61 	bl	80010e8 <genSetAngleCmd>
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <main+0x2c8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	705a      	strb	r2, [r3, #1]
 				      HAL_UART_Transmit_DMA(&huart2, servoAngleSetCmdL2,12);
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	492f      	ldr	r1, [pc, #188]	; (8001aec <main+0x338>)
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <main+0x2e8>)
 8001a32:	f003 fbef 	bl	8005214 <HAL_UART_Transmit_DMA>
 8001a36:	e002      	b.n	8001a3e <main+0x28a>
 				      //while(uartTxFlag[1]==0);
 				  }
 				  else
 					  uartTxFlag[1]=1;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <main+0x2c8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	705a      	strb	r2, [r3, #1]

 				  if (lineFlag[2]==1)
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <main+0x330>)
 8001a40:	789b      	ldrb	r3, [r3, #2]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d156      	bne.n	8001af4 <main+0x340>
 				  {
 					 //while(uartTxFlag[2]==0){};
 				      genSetAngleCmd(servoIDarray[i+6], servoAngleSet[i+6], 0, 0, servoAngleSetCmdL3);uartTxFlag[2]=0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3306      	adds	r3, #6
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <main+0x320>)
 8001a4c:	5cd0      	ldrb	r0, [r2, r3]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3306      	adds	r3, #6
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <main+0x318>)
 8001a54:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <main+0x33c>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f7ff fb42 	bl	80010e8 <genSetAngleCmd>
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <main+0x2c8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	709a      	strb	r2, [r3, #2]
 				  	  HAL_UART_Transmit_DMA(&huart3, servoAngleSetCmdL3,12);
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	4920      	ldr	r1, [pc, #128]	; (8001af0 <main+0x33c>)
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <main+0x2f0>)
 8001a70:	f003 fbd0 	bl	8005214 <HAL_UART_Transmit_DMA>
 8001a74:	e041      	b.n	8001afa <main+0x346>
 8001a76:	bf00      	nop
 8001a78:	20000708 	.word	0x20000708
 8001a7c:	200008d0 	.word	0x200008d0
 8001a80:	20000700 	.word	0x20000700
 8001a84:	40020000 	.word	0x40020000
 8001a88:	20000368 	.word	0x20000368
 8001a8c:	200006a8 	.word	0x200006a8
 8001a90:	20000510 	.word	0x20000510
 8001a94:	20000518 	.word	0x20000518
 8001a98:	2000033c 	.word	0x2000033c
 8001a9c:	2000074c 	.word	0x2000074c
 8001aa0:	2000065c 	.word	0x2000065c
 8001aa4:	200001d4 	.word	0x200001d4
 8001aa8:	20000654 	.word	0x20000654
 8001aac:	20000404 	.word	0x20000404
 8001ab0:	20000664 	.word	0x20000664
 8001ab4:	20000600 	.word	0x20000600
 8001ab8:	2000016c 	.word	0x2000016c
 8001abc:	20000028 	.word	0x20000028
 8001ac0:	20000030 	.word	0x20000030
 8001ac4:	20000034 	.word	0x20000034
 8001ac8:	20000850 	.word	0x20000850
 8001acc:	20000634 	.word	0x20000634
 8001ad0:	200009b0 	.word	0x200009b0
 8001ad4:	2000003c 	.word	0x2000003c
 8001ad8:	20000054 	.word	0x20000054
 8001adc:	200002e4 	.word	0x200002e4
 8001ae0:	2000002c 	.word	0x2000002c
 8001ae4:	20000244 	.word	0x20000244
 8001ae8:	200009a4 	.word	0x200009a4
 8001aec:	20000270 	.word	0x20000270
 8001af0:	2000034c 	.word	0x2000034c
 				  	  //while(uartTxFlag[2]==0);
 				  }
 				  else
 					  uartTxFlag[2]=1;
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <main+0x464>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	709a      	strb	r2, [r3, #2]

 				  if (lineFlag[3]==1)
 8001afa:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <main+0x468>)
 8001afc:	78db      	ldrb	r3, [r3, #3]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d117      	bne.n	8001b32 <main+0x37e>
				  {
 					// while(uartTxFlag[3]==0){};
 				  	  genSetAngleCmd(servoIDarray[i+9], servoAngleSet[i+9], 0, 0, servoAngleSetCmdL4); uartTxFlag[3]=0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3309      	adds	r3, #9
 8001b06:	4a46      	ldr	r2, [pc, #280]	; (8001c20 <main+0x46c>)
 8001b08:	5cd0      	ldrb	r0, [r2, r3]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3309      	adds	r3, #9
 8001b0e:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <main+0x470>)
 8001b10:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001b14:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <main+0x474>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f7ff fae4 	bl	80010e8 <genSetAngleCmd>
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <main+0x464>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	70da      	strb	r2, [r3, #3]
 				  	  HAL_UART_Transmit_DMA(&huart5, servoAngleSetCmdL4,12);
 8001b26:	220c      	movs	r2, #12
 8001b28:	493f      	ldr	r1, [pc, #252]	; (8001c28 <main+0x474>)
 8001b2a:	4840      	ldr	r0, [pc, #256]	; (8001c2c <main+0x478>)
 8001b2c:	f003 fb72 	bl	8005214 <HAL_UART_Transmit_DMA>
 8001b30:	e002      	b.n	8001b38 <main+0x384>
 				  	  //while(uartTxFlag[3]==0);
 				  }
 				  else
 					  uartTxFlag[3]=1;
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <main+0x464>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	70da      	strb	r2, [r3, #3]


 				  while(uartTxFlag[0]+uartTxFlag[1]+uartTxFlag[2]+uartTxFlag[3]<4);
 8001b38:	bf00      	nop
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <main+0x464>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <main+0x464>)
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a33      	ldr	r2, [pc, #204]	; (8001c18 <main+0x464>)
 8001b4c:	7892      	ldrb	r2, [r2, #2]
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	4413      	add	r3, r2
 8001b52:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <main+0x464>)
 8001b54:	78d2      	ldrb	r2, [r2, #3]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	4413      	add	r3, r2
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	dded      	ble.n	8001b3a <main+0x386>
		  	  for (i=0;i<servoNum;i++)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3301      	adds	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <main+0x47c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f73f af2a 	bgt.w	80019c6 <main+0x212>

 	 			  }
 		  }
		  setFinish=1;
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <main+0x480>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
		  if (raspiReadFlag==1)
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <main+0x484>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	f040 8185 	bne.w	8001e8c <main+0x6d8>
		  {

			  for (i=0;i<servoNum;i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	e17a      	b.n	8001e7e <main+0x6ca>
			  {
				  if (lineFlag[0]==1)
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <main+0x468>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10a      	bne.n	8001ba6 <main+0x3f2>
				    {uartRxFlag[0]=0;
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <main+0x488>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
				    //HAL_UART_Receive_DMA(&huart1, servoAngleRecCmdL1, 8);
				    genAngleAskCmd(servoIDarray[i],servoAngleAskCmdL1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <main+0x46c>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	4928      	ldr	r1, [pc, #160]	; (8001c40 <main+0x48c>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f9e8 	bl	8000f74 <genAngleAskCmd>
 8001ba4:	e002      	b.n	8001bac <main+0x3f8>
				    //while(uartTxFlag[0]==0);
				    }
				  else
				  	uartRxFlag[0]=1;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <main+0x488>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
				  if (lineFlag[1]==1)
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <main+0x468>)
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10b      	bne.n	8001bcc <main+0x418>
				    {uartRxFlag[1]=0;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <main+0x488>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
				    //HAL_UART_Receive_DMA(&huart2, servoAngleRecCmdL2, 8);
				    genAngleAskCmd(servoIDarray[i+3],servoAngleAskCmdL2);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <main+0x46c>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	4920      	ldr	r1, [pc, #128]	; (8001c44 <main+0x490>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f9d5 	bl	8000f74 <genAngleAskCmd>
 8001bca:	e002      	b.n	8001bd2 <main+0x41e>
				    //while(uartTxFlag[1]==0);
				    }
				  else
				    uartRxFlag[1]=1;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <main+0x488>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	705a      	strb	r2, [r3, #1]
				  if (lineFlag[2]==1)
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <main+0x468>)
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d10b      	bne.n	8001bf2 <main+0x43e>
				    {uartRxFlag[2]=0;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <main+0x488>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	709a      	strb	r2, [r3, #2]
				    //HAL_UART_Receive_DMA(&huart3, servoAngleRecCmdL3, 8);
				    genAngleAskCmd(servoIDarray[i+6],servoAngleAskCmdL3);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3306      	adds	r3, #6
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <main+0x46c>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	4917      	ldr	r1, [pc, #92]	; (8001c48 <main+0x494>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f9c2 	bl	8000f74 <genAngleAskCmd>
 8001bf0:	e002      	b.n	8001bf8 <main+0x444>

				    //while(uartTxFlag[2]==0);
				    }
				  else
				    uartRxFlag[2]=1;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <main+0x488>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	709a      	strb	r2, [r3, #2]
				  if (lineFlag[3]==1)
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <main+0x468>)
 8001bfa:	78db      	ldrb	r3, [r3, #3]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d127      	bne.n	8001c50 <main+0x49c>
				    {uartRxFlag[3]=0;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <main+0x488>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	70da      	strb	r2, [r3, #3]
				    //HAL_UART_Receive_DMA(&huart5, servoAngleRecCmdL4, 8);
				    genAngleAskCmd(servoIDarray[i+9],servoAngleAskCmdL4);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3309      	adds	r3, #9
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <main+0x46c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	490f      	ldr	r1, [pc, #60]	; (8001c4c <main+0x498>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f9af 	bl	8000f74 <genAngleAskCmd>
 8001c16:	e01e      	b.n	8001c56 <main+0x4a2>
 8001c18:	200008d0 	.word	0x200008d0
 8001c1c:	20000244 	.word	0x20000244
 8001c20:	2000003c 	.word	0x2000003c
 8001c24:	20000634 	.word	0x20000634
 8001c28:	20000048 	.word	0x20000048
 8001c2c:	20000404 	.word	0x20000404
 8001c30:	200009b0 	.word	0x200009b0
 8001c34:	20000030 	.word	0x20000030
 8001c38:	200002e4 	.word	0x200002e4
 8001c3c:	20000700 	.word	0x20000700
 8001c40:	20000344 	.word	0x20000344
 8001c44:	2000064c 	.word	0x2000064c
 8001c48:	20000508 	.word	0x20000508
 8001c4c:	20000744 	.word	0x20000744

				    //while(uartTxFlag[3]==0);
				    }
				  else
				    uartRxFlag[3]=1;
 8001c50:	4b96      	ldr	r3, [pc, #600]	; (8001eac <main+0x6f8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	70da      	strb	r2, [r3, #3]

				  if(lineFlag[0]==1) {HAL_UART_Transmit_DMA(&huart1, servoAngleAskCmdL1, 6);}
 8001c56:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <main+0x6fc>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d104      	bne.n	8001c68 <main+0x4b4>
 8001c5e:	2206      	movs	r2, #6
 8001c60:	4994      	ldr	r1, [pc, #592]	; (8001eb4 <main+0x700>)
 8001c62:	4895      	ldr	r0, [pc, #596]	; (8001eb8 <main+0x704>)
 8001c64:	f003 fad6 	bl	8005214 <HAL_UART_Transmit_DMA>
				  if(lineFlag[1]==1) {HAL_UART_Transmit_DMA(&huart2, servoAngleAskCmdL2, 6);}
 8001c68:	4b91      	ldr	r3, [pc, #580]	; (8001eb0 <main+0x6fc>)
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d104      	bne.n	8001c7a <main+0x4c6>
 8001c70:	2206      	movs	r2, #6
 8001c72:	4992      	ldr	r1, [pc, #584]	; (8001ebc <main+0x708>)
 8001c74:	4892      	ldr	r0, [pc, #584]	; (8001ec0 <main+0x70c>)
 8001c76:	f003 facd 	bl	8005214 <HAL_UART_Transmit_DMA>
				  if(lineFlag[2]==1) {HAL_UART_Transmit_DMA(&huart3, servoAngleAskCmdL3, 6);}
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <main+0x6fc>)
 8001c7c:	789b      	ldrb	r3, [r3, #2]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d104      	bne.n	8001c8c <main+0x4d8>
 8001c82:	2206      	movs	r2, #6
 8001c84:	498f      	ldr	r1, [pc, #572]	; (8001ec4 <main+0x710>)
 8001c86:	4890      	ldr	r0, [pc, #576]	; (8001ec8 <main+0x714>)
 8001c88:	f003 fac4 	bl	8005214 <HAL_UART_Transmit_DMA>
				  if(lineFlag[3]==1) {HAL_UART_Transmit_DMA(&huart5, servoAngleAskCmdL4, 6);}
 8001c8c:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <main+0x6fc>)
 8001c8e:	78db      	ldrb	r3, [r3, #3]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d104      	bne.n	8001c9e <main+0x4ea>
 8001c94:	2206      	movs	r2, #6
 8001c96:	498d      	ldr	r1, [pc, #564]	; (8001ecc <main+0x718>)
 8001c98:	488d      	ldr	r0, [pc, #564]	; (8001ed0 <main+0x71c>)
 8001c9a:	f003 fabb 	bl	8005214 <HAL_UART_Transmit_DMA>

				  //while(uartRxFlag[0]==0);
				  //while(uartRxFlag[1]==0);
				  //while(uartRxFlag[2]==0);
				  //while(uartRxFlag[3]==0);
				  while(uartRxFlag[0]+uartRxFlag[1]+uartRxFlag[2]+uartRxFlag[3]<4);
 8001c9e:	bf00      	nop
 8001ca0:	4b82      	ldr	r3, [pc, #520]	; (8001eac <main+0x6f8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <main+0x6f8>)
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a7e      	ldr	r2, [pc, #504]	; (8001eac <main+0x6f8>)
 8001cb2:	7892      	ldrb	r2, [r2, #2]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a7c      	ldr	r2, [pc, #496]	; (8001eac <main+0x6f8>)
 8001cba:	78d2      	ldrb	r2, [r2, #3]
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	dded      	ble.n	8001ca0 <main+0x4ec>

				  if (lineFlag[0]==1)
 8001cc4:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <main+0x6fc>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d12f      	bne.n	8001d2c <main+0x578>
				  {
					  //while(uartRxFlag[0]==0){};
					  angleres=recAngleCmdDecode(servoIDarray[i], servoAngleRecCmdL1, servoAngleRead[i]/10.0);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a81      	ldr	r2, [pc, #516]	; (8001ed4 <main+0x720>)
 8001cd0:	5cd4      	ldrb	r4, [r2, r3]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <main+0x724>)
 8001cd6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbc6 	bl	800046c <__aeabi_i2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b7d      	ldr	r3, [pc, #500]	; (8001edc <main+0x728>)
 8001ce6:	f7fe fd55 	bl	8000794 <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	ec43 2b17 	vmov	d7, r2, r3
 8001cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf6:	eef0 0a67 	vmov.f32	s1, s15
 8001cfa:	4979      	ldr	r1, [pc, #484]	; (8001ee0 <main+0x72c>)
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff f977 	bl	8000ff0 <recAngleCmdDecode>
 8001d02:	ed87 0b04 	vstr	d0, [r7, #16]
					  servoAngleRead[i]=angleres*10.0;
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b74      	ldr	r3, [pc, #464]	; (8001edc <main+0x728>)
 8001d0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d10:	f7fe fc16 	bl	8000540 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	687c      	ldr	r4, [r7, #4]
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fe21 	bl	8000964 <__aeabi_d2iz>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <main+0x724>)
 8001d28:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				  }
				  if (lineFlag[1]==1)
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <main+0x6fc>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d132      	bne.n	8001d9a <main+0x5e6>
				  {
					  //while(uartRxFlag[1]==0){};
					  angleres=recAngleCmdDecode(servoIDarray[i+3], servoAngleRecCmdL2, servoAngleRead[i+3]/10.0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3303      	adds	r3, #3
 8001d38:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <main+0x720>)
 8001d3a:	5cd4      	ldrb	r4, [r2, r3]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <main+0x724>)
 8001d42:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb90 	bl	800046c <__aeabi_i2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b62      	ldr	r3, [pc, #392]	; (8001edc <main+0x728>)
 8001d52:	f7fe fd1f 	bl	8000794 <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	ec43 2b17 	vmov	d7, r2, r3
 8001d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d62:	eef0 0a67 	vmov.f32	s1, s15
 8001d66:	495f      	ldr	r1, [pc, #380]	; (8001ee4 <main+0x730>)
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff f941 	bl	8000ff0 <recAngleCmdDecode>
 8001d6e:	ed87 0b04 	vstr	d0, [r7, #16]
					  servoAngleRead[i+3]=angleres*10.0;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b59      	ldr	r3, [pc, #356]	; (8001edc <main+0x728>)
 8001d78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d7c:	f7fe fbe0 	bl	8000540 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1cdc      	adds	r4, r3, #3
 8001d8c:	f7fe fdea 	bl	8000964 <__aeabi_d2iz>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <main+0x724>)
 8001d96:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				  }
				  if (lineFlag[2]==1)
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <main+0x6fc>)
 8001d9c:	789b      	ldrb	r3, [r3, #2]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d132      	bne.n	8001e08 <main+0x654>
				  {
					  //while(uartRxFlag[2]==0){};
					  angleres=recAngleCmdDecode(servoIDarray[i+6], servoAngleRecCmdL3, servoAngleRead[i+6]/10.0);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3306      	adds	r3, #6
 8001da6:	4a4b      	ldr	r2, [pc, #300]	; (8001ed4 <main+0x720>)
 8001da8:	5cd4      	ldrb	r4, [r2, r3]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3306      	adds	r3, #6
 8001dae:	4a4a      	ldr	r2, [pc, #296]	; (8001ed8 <main+0x724>)
 8001db0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb59 	bl	800046c <__aeabi_i2d>
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <main+0x728>)
 8001dc0:	f7fe fce8 	bl	8000794 <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	ec43 2b17 	vmov	d7, r2, r3
 8001dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd0:	eef0 0a67 	vmov.f32	s1, s15
 8001dd4:	4944      	ldr	r1, [pc, #272]	; (8001ee8 <main+0x734>)
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff f90a 	bl	8000ff0 <recAngleCmdDecode>
 8001ddc:	ed87 0b04 	vstr	d0, [r7, #16]
					  servoAngleRead[i+6]=angleres*10.0;
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <main+0x728>)
 8001de6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dea:	f7fe fba9 	bl	8000540 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	1d9c      	adds	r4, r3, #6
 8001dfa:	f7fe fdb3 	bl	8000964 <__aeabi_d2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <main+0x724>)
 8001e04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				  }
				  if (lineFlag[3]==1)
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <main+0x6fc>)
 8001e0a:	78db      	ldrb	r3, [r3, #3]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d133      	bne.n	8001e78 <main+0x6c4>
				  {
					  //while(uartRxFlag[3]==0){};
					  angleres=recAngleCmdDecode(servoIDarray[i+9], servoAngleRecCmdL4, servoAngleRead[i+9]/10.0);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3309      	adds	r3, #9
 8001e14:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <main+0x720>)
 8001e16:	5cd4      	ldrb	r4, [r2, r3]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3309      	adds	r3, #9
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <main+0x724>)
 8001e1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb22 	bl	800046c <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <main+0x728>)
 8001e2e:	f7fe fcb1 	bl	8000794 <__aeabi_ddiv>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ec43 2b17 	vmov	d7, r2, r3
 8001e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3e:	eef0 0a67 	vmov.f32	s1, s15
 8001e42:	492a      	ldr	r1, [pc, #168]	; (8001eec <main+0x738>)
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff f8d3 	bl	8000ff0 <recAngleCmdDecode>
 8001e4a:	ed87 0b04 	vstr	d0, [r7, #16]
					  servoAngleRead[i+9]=angleres*10.0;
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <main+0x728>)
 8001e54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e58:	f7fe fb72 	bl	8000540 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0409 	add.w	r4, r3, #9
 8001e6a:	f7fe fd7b 	bl	8000964 <__aeabi_d2iz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <main+0x724>)
 8001e74:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			  for (i=0;i<servoNum;i++)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <main+0x73c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	f73f ae7e 	bgt.w	8001b88 <main+0x3d4>
				  }
			  }
		  }
		  readFinish=1;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <main+0x740>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

		  //genAngleBackCmd_CH100(servoIDarray, servoNum,servoAngleRead, spiSendData_CH100, IMU_CH100_data);
		  genAngleBackCmd(servoIDarray, servoNum,servoAngleRead, spiSendData, IMU_data);
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <main+0x73c>)
 8001e94:	7819      	ldrb	r1, [r3, #0]
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <main+0x744>)
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <main+0x748>)
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <main+0x724>)
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <main+0x720>)
 8001ea0:	f7ff faf4 	bl	800148c <genAngleBackCmd>
		  getRaspiCMD=0;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <main+0x74c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
	  if (getRaspiCMD==1)
 8001eaa:	e52e      	b.n	800190a <main+0x156>
 8001eac:	20000700 	.word	0x20000700
 8001eb0:	20000244 	.word	0x20000244
 8001eb4:	20000344 	.word	0x20000344
 8001eb8:	20000518 	.word	0x20000518
 8001ebc:	2000064c 	.word	0x2000064c
 8001ec0:	2000074c 	.word	0x2000074c
 8001ec4:	20000508 	.word	0x20000508
 8001ec8:	200001d4 	.word	0x200001d4
 8001ecc:	20000744 	.word	0x20000744
 8001ed0:	20000404 	.word	0x20000404
 8001ed4:	2000003c 	.word	0x2000003c
 8001ed8:	20000218 	.word	0x20000218
 8001edc:	40240000 	.word	0x40240000
 8001ee0:	20000510 	.word	0x20000510
 8001ee4:	2000033c 	.word	0x2000033c
 8001ee8:	2000065c 	.word	0x2000065c
 8001eec:	20000654 	.word	0x20000654
 8001ef0:	200009b0 	.word	0x200009b0
 8001ef4:	20000034 	.word	0x20000034
 8001ef8:	20000854 	.word	0x20000854
 8001efc:	20000708 	.word	0x20000708
 8001f00:	20000028 	.word	0x20000028

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	; 0x50
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2230      	movs	r2, #48	; 0x30
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 fae4 	bl	80064e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <SystemClock_Config+0xcc>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <SystemClock_Config+0xcc>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6413      	str	r3, [r2, #64]	; 0x40
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <SystemClock_Config+0xcc>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <SystemClock_Config+0xd0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <SystemClock_Config+0xd0>)
 8001f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <SystemClock_Config+0xd0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f74:	2304      	movs	r3, #4
 8001f76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f78:	23a8      	movs	r3, #168	; 0xa8
 8001f7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f80:	2304      	movs	r3, #4
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f84:	f107 0320 	add.w	r3, r7, #32
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 ff29 	bl	8003de0 <HAL_RCC_OscConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f94:	f000 fa16 	bl	80023c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	230f      	movs	r3, #15
 8001f9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fa4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 f98a 	bl	80042d0 <HAL_RCC_ClockConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fc2:	f000 f9ff 	bl	80023c4 <Error_Handler>
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3750      	adds	r7, #80	; 0x50
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_SPI1_Init+0x5c>)
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <MX_SPI1_Init+0x60>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_SPI1_Init+0x5c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_SPI1_Init+0x5c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_SPI1_Init+0x5c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_SPI1_Init+0x5c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_SPI1_Init+0x5c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_SPI1_Init+0x5c>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_SPI1_Init+0x5c>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_SPI1_Init+0x5c>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_SPI1_Init+0x5c>)
 8002014:	2200      	movs	r2, #0
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_SPI1_Init+0x5c>)
 800201a:	220a      	movs	r2, #10
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_SPI1_Init+0x5c>)
 8002020:	f002 fb52 	bl	80046c8 <HAL_SPI_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800202a:	f000 f9cb 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200006a8 	.word	0x200006a8
 8002038:	40013000 	.word	0x40013000

0800203c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_UART4_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <MX_UART4_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <MX_UART4_Init+0x4c>)
 8002048:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800204c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_UART4_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_UART4_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_UART4_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_UART4_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_UART4_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_UART4_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_UART4_Init+0x4c>)
 8002074:	f002 ffee 	bl	8005054 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 f9a1 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000664 	.word	0x20000664
 800208c:	40004c00 	.word	0x40004c00

08002090 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_UART5_Init+0x48>)
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <MX_UART5_Init+0x4c>)
 8002098:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 500000;
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_UART5_Init+0x48>)
 800209c:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <MX_UART5_Init+0x50>)
 800209e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <MX_UART5_Init+0x48>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_UART5_Init+0x48>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <MX_UART5_Init+0x48>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_UART5_Init+0x48>)
 80020b4:	220c      	movs	r2, #12
 80020b6:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <MX_UART5_Init+0x48>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_UART5_Init+0x48>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <MX_UART5_Init+0x48>)
 80020c6:	f002 ffc5 	bl	8005054 <HAL_UART_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_UART5_Init+0x44>
  {
    Error_Handler();
 80020d0:	f000 f978 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000404 	.word	0x20000404
 80020dc:	40005000 	.word	0x40005000
 80020e0:	0007a120 	.word	0x0007a120

080020e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_USART1_UART_Init+0x48>)
 80020ea:	4a11      	ldr	r2, [pc, #68]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_USART1_UART_Init+0x48>)
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <MX_USART1_UART_Init+0x50>)
 80020f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <MX_USART1_UART_Init+0x48>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_USART1_UART_Init+0x48>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <MX_USART1_UART_Init+0x48>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_USART1_UART_Init+0x48>)
 8002108:	220c      	movs	r2, #12
 800210a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <MX_USART1_UART_Init+0x48>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_USART1_UART_Init+0x48>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_USART1_UART_Init+0x48>)
 800211a:	f002 ff9b 	bl	8005054 <HAL_UART_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002124:	f000 f94e 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000518 	.word	0x20000518
 8002130:	40011000 	.word	0x40011000
 8002134:	0007a120 	.word	0x0007a120

08002138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_USART2_UART_Init+0x48>)
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_USART2_UART_Init+0x48>)
 8002144:	4a10      	ldr	r2, [pc, #64]	; (8002188 <MX_USART2_UART_Init+0x50>)
 8002146:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <MX_USART2_UART_Init+0x48>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USART2_UART_Init+0x48>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_USART2_UART_Init+0x48>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USART2_UART_Init+0x48>)
 800215c:	220c      	movs	r2, #12
 800215e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <MX_USART2_UART_Init+0x48>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USART2_UART_Init+0x48>)
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_USART2_UART_Init+0x48>)
 800216e:	f002 ff71 	bl	8005054 <HAL_UART_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002178:	f000 f924 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000074c 	.word	0x2000074c
 8002184:	40004400 	.word	0x40004400
 8002188:	0007a120 	.word	0x0007a120

0800218c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 8002192:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <MX_USART3_UART_Init+0x4c>)
 8002194:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 8002198:	4a10      	ldr	r2, [pc, #64]	; (80021dc <MX_USART3_UART_Init+0x50>)
 800219a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 80021b0:	220c      	movs	r2, #12
 80021b2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 80021bc:	2200      	movs	r2, #0
 80021be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021c0:	4804      	ldr	r0, [pc, #16]	; (80021d4 <MX_USART3_UART_Init+0x48>)
 80021c2:	f002 ff47 	bl	8005054 <HAL_UART_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80021cc:	f000 f8fa 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200001d4 	.word	0x200001d4
 80021d8:	40004800 	.word	0x40004800
 80021dc:	0007a120 	.word	0x0007a120

080021e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <MX_DMA_Init+0x108>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a3e      	ldr	r2, [pc, #248]	; (80022e8 <MX_DMA_Init+0x108>)
 80021f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <MX_DMA_Init+0x108>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <MX_DMA_Init+0x108>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a37      	ldr	r2, [pc, #220]	; (80022e8 <MX_DMA_Init+0x108>)
 800220c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <MX_DMA_Init+0x108>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	200b      	movs	r0, #11
 8002224:	f000 ffd3 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002228:	200b      	movs	r0, #11
 800222a:	f000 ffec 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	200c      	movs	r0, #12
 8002234:	f000 ffcb 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002238:	200c      	movs	r0, #12
 800223a:	f000 ffe4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	200d      	movs	r0, #13
 8002244:	f000 ffc3 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002248:	200d      	movs	r0, #13
 800224a:	f000 ffdc 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	200e      	movs	r0, #14
 8002254:	f000 ffbb 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002258:	200e      	movs	r0, #14
 800225a:	f000 ffd4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	200f      	movs	r0, #15
 8002264:	f000 ffb3 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002268:	200f      	movs	r0, #15
 800226a:	f000 ffcc 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2010      	movs	r0, #16
 8002274:	f000 ffab 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002278:	2010      	movs	r0, #16
 800227a:	f000 ffc4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2011      	movs	r0, #17
 8002284:	f000 ffa3 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002288:	2011      	movs	r0, #17
 800228a:	f000 ffbc 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	202f      	movs	r0, #47	; 0x2f
 8002294:	f000 ff9b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002298:	202f      	movs	r0, #47	; 0x2f
 800229a:	f000 ffb4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2038      	movs	r0, #56	; 0x38
 80022a4:	f000 ff93 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022a8:	2038      	movs	r0, #56	; 0x38
 80022aa:	f000 ffac 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	203b      	movs	r0, #59	; 0x3b
 80022b4:	f000 ff8b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80022b8:	203b      	movs	r0, #59	; 0x3b
 80022ba:	f000 ffa4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2044      	movs	r0, #68	; 0x44
 80022c4:	f000 ff83 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80022c8:	2044      	movs	r0, #68	; 0x44
 80022ca:	f000 ff9c 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2046      	movs	r0, #70	; 0x46
 80022d4:	f000 ff7b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80022d8:	2046      	movs	r0, #70	; 0x46
 80022da:	f000 ff94 	bl	8003206 <HAL_NVIC_EnableIRQ>

}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <MX_GPIO_Init+0xd0>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a25      	ldr	r2, [pc, #148]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_GPIO_Init+0xd0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <MX_GPIO_Init+0xd0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <MX_GPIO_Init+0xd0>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_GPIO_Init+0xd0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Onboard_GPIO_Port, LED_Onboard_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <MX_GPIO_Init+0xd4>)
 8002394:	f001 fcf0 	bl	8003d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Onboard_Pin */
  GPIO_InitStruct.Pin = LED_Onboard_Pin;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Onboard_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <MX_GPIO_Init+0xd4>)
 80023b0:	f001 fb46 	bl	8003a40 <HAL_GPIO_Init>

}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  __disable_irq();
/*  while (1)
  {
  }*/
  /* USER CODE END Error_Handler_Debug */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_MspInit+0x4c>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_MspInit+0x4c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_MspInit+0x4c>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_MspInit+0x4c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_SPI_MspInit+0x150>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f040 8092 	bne.w	8002570 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_SPI_MspInit+0x154>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_SPI_MspInit+0x154>)
 8002456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_SPI_MspInit+0x154>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_SPI_MspInit+0x154>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a42      	ldr	r2, [pc, #264]	; (800257c <HAL_SPI_MspInit+0x154>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <HAL_SPI_MspInit+0x154>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002484:	23f0      	movs	r3, #240	; 0xf0
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002494:	2305      	movs	r3, #5
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4838      	ldr	r0, [pc, #224]	; (8002580 <HAL_SPI_MspInit+0x158>)
 80024a0:	f001 face 	bl	8003a40 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024a6:	4a38      	ldr	r2, [pc, #224]	; (8002588 <HAL_SPI_MspInit+0x160>)
 80024a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024ac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80024b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80024e6:	4827      	ldr	r0, [pc, #156]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024e8:	f000 fea8 	bl	800323c <HAL_DMA_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80024f2:	f7ff ff67 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_SPI_MspInit+0x15c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002504:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_SPI_MspInit+0x168>)
 8002506:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_SPI_MspInit+0x164>)
 800250a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800250e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_SPI_MspInit+0x164>)
 800251e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002522:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_SPI_MspInit+0x164>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002536:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_SPI_MspInit+0x164>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002544:	4811      	ldr	r0, [pc, #68]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002546:	f000 fe79 	bl	800323c <HAL_DMA_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002550:	f7ff ff38 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_SPI_MspInit+0x164>)
 8002558:	649a      	str	r2, [r3, #72]	; 0x48
 800255a:	4a0c      	ldr	r2, [pc, #48]	; (800258c <HAL_SPI_MspInit+0x164>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	2023      	movs	r0, #35	; 0x23
 8002566:	f000 fe32 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800256a:	2023      	movs	r0, #35	; 0x23
 800256c:	f000 fe4b 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	3728      	adds	r7, #40	; 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40013000 	.word	0x40013000
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000
 8002584:	200007f0 	.word	0x200007f0
 8002588:	40026410 	.word	0x40026410
 800258c:	20000868 	.word	0x20000868
 8002590:	40026458 	.word	0x40026458

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b094      	sub	sp, #80	; 0x50
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a59      	ldr	r2, [pc, #356]	; (8002718 <HAL_UART_MspInit+0x184>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f040 80c0 	bne.w	8002738 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80025bc:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_UART_MspInit+0x188>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_UART_MspInit+0x188>)
 80025c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b54      	ldr	r3, [pc, #336]	; (800271c <HAL_UART_MspInit+0x188>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_UART_MspInit+0x188>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_UART_MspInit+0x188>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b4d      	ldr	r3, [pc, #308]	; (800271c <HAL_UART_MspInit+0x188>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
 80025f4:	4b49      	ldr	r3, [pc, #292]	; (800271c <HAL_UART_MspInit+0x188>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_UART_MspInit+0x188>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_UART_MspInit+0x188>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800260c:	2302      	movs	r3, #2
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800261c:	2308      	movs	r3, #8
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002624:	4619      	mov	r1, r3
 8002626:	483e      	ldr	r0, [pc, #248]	; (8002720 <HAL_UART_MspInit+0x18c>)
 8002628:	f001 fa0a 	bl	8003a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800262c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800263e:	2308      	movs	r3, #8
 8002640:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002646:	4619      	mov	r1, r3
 8002648:	4836      	ldr	r0, [pc, #216]	; (8002724 <HAL_UART_MspInit+0x190>)
 800264a:	f001 f9f9 	bl	8003a40 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002650:	4a36      	ldr	r2, [pc, #216]	; (800272c <HAL_UART_MspInit+0x198>)
 8002652:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002654:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800265a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_UART_MspInit+0x194>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_UART_MspInit+0x194>)
 800266a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_UART_MspInit+0x194>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_UART_MspInit+0x194>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800268e:	4826      	ldr	r0, [pc, #152]	; (8002728 <HAL_UART_MspInit+0x194>)
 8002690:	f000 fdd4 	bl	800323c <HAL_DMA_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800269a:	f7ff fe93 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a21      	ldr	r2, [pc, #132]	; (8002728 <HAL_UART_MspInit+0x194>)
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <HAL_UART_MspInit+0x194>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026ac:	4a21      	ldr	r2, [pc, #132]	; (8002734 <HAL_UART_MspInit+0x1a0>)
 80026ae:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ca:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80026ea:	4811      	ldr	r0, [pc, #68]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026ec:	f000 fda6 	bl	800323c <HAL_DMA_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80026f6:	f7ff fe65 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_UART_MspInit+0x19c>)
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_UART_MspInit+0x19c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2034      	movs	r0, #52	; 0x34
 800270c:	f000 fd5f 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002710:	2034      	movs	r0, #52	; 0x34
 8002712:	f000 fd78 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002716:	e2b9      	b.n	8002c8c <HAL_UART_MspInit+0x6f8>
 8002718:	40004c00 	.word	0x40004c00
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000
 8002724:	40020800 	.word	0x40020800
 8002728:	200000a8 	.word	0x200000a8
 800272c:	40026040 	.word	0x40026040
 8002730:	200008e4 	.word	0x200008e4
 8002734:	40026070 	.word	0x40026070
  else if(huart->Instance==UART5)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <HAL_UART_MspInit+0x314>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f040 80c2 	bne.w	80028c8 <HAL_UART_MspInit+0x334>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002748:	4b58      	ldr	r3, [pc, #352]	; (80028ac <HAL_UART_MspInit+0x318>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	4a57      	ldr	r2, [pc, #348]	; (80028ac <HAL_UART_MspInit+0x318>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002752:	6413      	str	r3, [r2, #64]	; 0x40
 8002754:	4b55      	ldr	r3, [pc, #340]	; (80028ac <HAL_UART_MspInit+0x318>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
 8002764:	4b51      	ldr	r3, [pc, #324]	; (80028ac <HAL_UART_MspInit+0x318>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_UART_MspInit+0x318>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6313      	str	r3, [r2, #48]	; 0x30
 8002770:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <HAL_UART_MspInit+0x318>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_UART_MspInit+0x318>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	4a49      	ldr	r2, [pc, #292]	; (80028ac <HAL_UART_MspInit+0x318>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6313      	str	r3, [r2, #48]	; 0x30
 800278c:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_UART_MspInit+0x318>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027aa:	2308      	movs	r3, #8
 80027ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027b2:	4619      	mov	r1, r3
 80027b4:	483e      	ldr	r0, [pc, #248]	; (80028b0 <HAL_UART_MspInit+0x31c>)
 80027b6:	f001 f943 	bl	8003a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ba:	2304      	movs	r3, #4
 80027bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027ca:	2308      	movs	r3, #8
 80027cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4837      	ldr	r0, [pc, #220]	; (80028b4 <HAL_UART_MspInit+0x320>)
 80027d6:	f001 f933 	bl	8003a40 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_UART_MspInit+0x324>)
 80027dc:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_UART_MspInit+0x328>)
 80027de:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_UART_MspInit+0x324>)
 80027e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e8:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_UART_MspInit+0x324>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_UART_MspInit+0x324>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_UART_MspInit+0x324>)
 80027f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fa:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_UART_MspInit+0x324>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_UART_MspInit+0x324>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_UART_MspInit+0x324>)
 800280a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_UART_MspInit+0x324>)
 8002812:	2200      	movs	r2, #0
 8002814:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_UART_MspInit+0x324>)
 8002818:	2200      	movs	r2, #0
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800281c:	4826      	ldr	r0, [pc, #152]	; (80028b8 <HAL_UART_MspInit+0x324>)
 800281e:	f000 fd0d 	bl	800323c <HAL_DMA_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_UART_MspInit+0x298>
      Error_Handler();
 8002828:	f7ff fdcc 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <HAL_UART_MspInit+0x324>)
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_UART_MspInit+0x324>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 800283a:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_UART_MspInit+0x330>)
 800283c:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002844:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002858:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002878:	4811      	ldr	r0, [pc, #68]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 800287a:	f000 fcdf 	bl	800323c <HAL_DMA_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8002884:	f7ff fd9e 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
 800288e:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <HAL_UART_MspInit+0x32c>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	2035      	movs	r0, #53	; 0x35
 800289a:	f000 fc98 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800289e:	2035      	movs	r0, #53	; 0x35
 80028a0:	f000 fcb1 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 80028a4:	e1f2      	b.n	8002c8c <HAL_UART_MspInit+0x6f8>
 80028a6:	bf00      	nop
 80028a8:	40005000 	.word	0x40005000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	20000790 	.word	0x20000790
 80028bc:	40026010 	.word	0x40026010
 80028c0:	20000944 	.word	0x20000944
 80028c4:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a97      	ldr	r2, [pc, #604]	; (8002b2c <HAL_UART_MspInit+0x598>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 8093 	bne.w	80029fa <HAL_UART_MspInit+0x466>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	4b95      	ldr	r3, [pc, #596]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	4a94      	ldr	r2, [pc, #592]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6453      	str	r3, [r2, #68]	; 0x44
 80028e4:	4b92      	ldr	r3, [pc, #584]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a8d      	ldr	r2, [pc, #564]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b8b      	ldr	r3, [pc, #556]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800290c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800291e:	2307      	movs	r3, #7
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002926:	4619      	mov	r1, r3
 8002928:	4882      	ldr	r0, [pc, #520]	; (8002b34 <HAL_UART_MspInit+0x5a0>)
 800292a:	f001 f889 	bl	8003a40 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800292e:	4b82      	ldr	r3, [pc, #520]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002930:	4a82      	ldr	r2, [pc, #520]	; (8002b3c <HAL_UART_MspInit+0x5a8>)
 8002932:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002934:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800293a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800293c:	4b7e      	ldr	r3, [pc, #504]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002948:	4b7b      	ldr	r3, [pc, #492]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 800294a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002950:	4b79      	ldr	r3, [pc, #484]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002952:	2200      	movs	r2, #0
 8002954:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002956:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800295c:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 800295e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002962:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002964:	4b74      	ldr	r3, [pc, #464]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002966:	2200      	movs	r2, #0
 8002968:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296a:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 800296c:	2200      	movs	r2, #0
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002970:	4871      	ldr	r0, [pc, #452]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002972:	f000 fc63 	bl	800323c <HAL_DMA_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_MspInit+0x3ec>
      Error_Handler();
 800297c:	f7ff fd22 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a6d      	ldr	r2, [pc, #436]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
 8002986:	4a6c      	ldr	r2, [pc, #432]	; (8002b38 <HAL_UART_MspInit+0x5a4>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800298c:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 800298e:	4a6d      	ldr	r2, [pc, #436]	; (8002b44 <HAL_UART_MspInit+0x5b0>)
 8002990:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002992:	4b6b      	ldr	r3, [pc, #428]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 8002994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002998:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800299a:	4b69      	ldr	r3, [pc, #420]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a0:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ae:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b4:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029ba:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029bc:	2200      	movs	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c0:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029cc:	485c      	ldr	r0, [pc, #368]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029ce:	f000 fc35 	bl	800323c <HAL_DMA_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_UART_MspInit+0x448>
      Error_Handler();
 80029d8:	f7ff fcf4 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_UART_MspInit+0x5ac>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2025      	movs	r0, #37	; 0x25
 80029ee:	f000 fbee 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029f2:	2025      	movs	r0, #37	; 0x25
 80029f4:	f000 fc07 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 80029f8:	e148      	b.n	8002c8c <HAL_UART_MspInit+0x6f8>
  else if(huart->Instance==USART2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_UART_MspInit+0x5b4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	f040 80ab 	bne.w	8002b5c <HAL_UART_MspInit+0x5c8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_UART_MspInit+0x59c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a3e:	230c      	movs	r3, #12
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a4e:	2307      	movs	r3, #7
 8002a50:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a56:	4619      	mov	r1, r3
 8002a58:	4836      	ldr	r0, [pc, #216]	; (8002b34 <HAL_UART_MspInit+0x5a0>)
 8002a5a:	f000 fff1 	bl	8003a40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a60:	4a3b      	ldr	r2, [pc, #236]	; (8002b50 <HAL_UART_MspInit+0x5bc>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6c:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002aa0:	482a      	ldr	r0, [pc, #168]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002aa2:	f000 fbcb 	bl	800323c <HAL_DMA_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_MspInit+0x51c>
      Error_Handler();
 8002aac:	f7ff fc8a 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab6:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_UART_MspInit+0x5b8>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002abe:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <HAL_UART_MspInit+0x5c4>)
 8002ac0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002ac4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ac8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002adc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002afc:	4815      	ldr	r0, [pc, #84]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002afe:	f000 fb9d 	bl	800323c <HAL_DMA_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_MspInit+0x578>
      Error_Handler();
 8002b08:	f7ff fc5c 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_UART_MspInit+0x5c0>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2026      	movs	r0, #38	; 0x26
 8002b1e:	f000 fb56 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b22:	2026      	movs	r0, #38	; 0x26
 8002b24:	f000 fb6f 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002b28:	e0b0      	b.n	8002c8c <HAL_UART_MspInit+0x6f8>
 8002b2a:	bf00      	nop
 8002b2c:	40011000 	.word	0x40011000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	20000448 	.word	0x20000448
 8002b3c:	40026488 	.word	0x40026488
 8002b40:	200003a4 	.word	0x200003a4
 8002b44:	400264b8 	.word	0x400264b8
 8002b48:	40004400 	.word	0x40004400
 8002b4c:	2000010c 	.word	0x2000010c
 8002b50:	40026088 	.word	0x40026088
 8002b54:	200004a8 	.word	0x200004a8
 8002b58:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_UART_MspInit+0x700>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	f040 8092 	bne.w	8002c8c <HAL_UART_MspInit+0x6f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_UART_MspInit+0x704>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <HAL_UART_MspInit+0x704>)
 8002b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_UART_MspInit+0x704>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_UART_MspInit+0x704>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_UART_MspInit+0x704>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_UART_MspInit+0x704>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4837      	ldr	r0, [pc, #220]	; (8002c9c <HAL_UART_MspInit+0x708>)
 8002bbe:	f000 ff3f 	bl	8003a40 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bc4:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_UART_MspInit+0x710>)
 8002bc6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bea:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c04:	4826      	ldr	r0, [pc, #152]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002c06:	f000 fb19 	bl	800323c <HAL_DMA_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_MspInit+0x680>
      Error_Handler();
 8002c10:	f7ff fbd8 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_UART_MspInit+0x70c>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c22:	4a22      	ldr	r2, [pc, #136]	; (8002cac <HAL_UART_MspInit+0x718>)
 8002c24:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c2c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c40:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c60:	4811      	ldr	r0, [pc, #68]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c62:	f000 faeb 	bl	800323c <HAL_DMA_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_MspInit+0x6dc>
      Error_Handler();
 8002c6c:	f7ff fbaa 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_UART_MspInit+0x714>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2027      	movs	r0, #39	; 0x27
 8002c82:	f000 faa4 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c86:	2027      	movs	r0, #39	; 0x27
 8002c88:	f000 fabd 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002c8c:	bf00      	nop
 8002c8e:	3750      	adds	r7, #80	; 0x50
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40004800 	.word	0x40004800
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	20000174 	.word	0x20000174
 8002ca4:	40026028 	.word	0x40026028
 8002ca8:	20000284 	.word	0x20000284
 8002cac:	40026058 	.word	0x40026058

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f948 	bl	8002f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <DMA1_Stream0_IRQHandler+0x10>)
 8002d0a:	f000 fc2f 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000790 	.word	0x20000790

08002d18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <DMA1_Stream1_IRQHandler+0x10>)
 8002d1e:	f000 fc25 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000174 	.word	0x20000174

08002d2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <DMA1_Stream2_IRQHandler+0x10>)
 8002d32:	f000 fc1b 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200000a8 	.word	0x200000a8

08002d40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <DMA1_Stream3_IRQHandler+0x10>)
 8002d46:	f000 fc11 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000284 	.word	0x20000284

08002d54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <DMA1_Stream4_IRQHandler+0x10>)
 8002d5a:	f000 fc07 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200008e4 	.word	0x200008e4

08002d68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <DMA1_Stream5_IRQHandler+0x10>)
 8002d6e:	f000 fbfd 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000010c 	.word	0x2000010c

08002d7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <DMA1_Stream6_IRQHandler+0x10>)
 8002d82:	f000 fbf3 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200004a8 	.word	0x200004a8

08002d90 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <SPI1_IRQHandler+0x10>)
 8002d96:	f001 fe23 	bl	80049e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200006a8 	.word	0x200006a8

08002da4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <USART1_IRQHandler+0x10>)
 8002daa:	f002 fae1 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000518 	.word	0x20000518

08002db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <USART2_IRQHandler+0x10>)
 8002dbe:	f002 fad7 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000074c 	.word	0x2000074c

08002dcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <USART3_IRQHandler+0x10>)
 8002dd2:	f002 facd 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200001d4 	.word	0x200001d4

08002de0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <DMA1_Stream7_IRQHandler+0x10>)
 8002de6:	f000 fbc1 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000944 	.word	0x20000944

08002df4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <UART4_IRQHandler+0x10>)
 8002dfa:	f002 fab9 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000664 	.word	0x20000664

08002e08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <UART5_IRQHandler+0x10>)
 8002e0e:	f002 faaf 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000404 	.word	0x20000404

08002e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <DMA2_Stream0_IRQHandler+0x10>)
 8002e22:	f000 fba3 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200007f0 	.word	0x200007f0

08002e30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <DMA2_Stream3_IRQHandler+0x10>)
 8002e36:	f000 fb99 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000868 	.word	0x20000868

08002e44 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <DMA2_Stream5_IRQHandler+0x10>)
 8002e4a:	f000 fb8f 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000448 	.word	0x20000448

08002e58 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <DMA2_Stream7_IRQHandler+0x10>)
 8002e5e:	f000 fb85 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200003a4 	.word	0x200003a4

08002e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <SystemInit+0x28>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <SystemInit+0x28>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SystemInit+0x28>)
 8002e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e86:	609a      	str	r2, [r3, #8]
#endif
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e9e:	e003      	b.n	8002ea8 <LoopCopyDataInit>

08002ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ea6:	3104      	adds	r1, #4

08002ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ea8:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002eb0:	d3f6      	bcc.n	8002ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002eb4:	e002      	b.n	8002ebc <LoopFillZerobss>

08002eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eb8:	f842 3b04 	str.w	r3, [r2], #4

08002ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ec0:	d3f9      	bcc.n	8002eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ec2:	f7ff ffd3 	bl	8002e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec6:	f003 fae7 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eca:	f7fe fc73 	bl	80017b4 <main>
  bx  lr    
 8002ece:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ed0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ed4:	08006538 	.word	0x08006538
  ldr  r0, =_sdata
 8002ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002edc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002ee0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002ee4:	200009b8 	.word	0x200009b8

08002ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee8:	e7fe      	b.n	8002ee8 <ADC_IRQHandler>
	...

08002eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <HAL_Init+0x40>)
 8002ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_Init+0x40>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_Init+0x40>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f14:	2003      	movs	r0, #3
 8002f16:	f000 f94f 	bl	80031b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f000 f808 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f20:	f7ff fa5a 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_InitTick+0x54>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_InitTick+0x58>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f967 	bl	8003222 <HAL_SYSTICK_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00e      	b.n	8002f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	d80a      	bhi.n	8002f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f64:	2200      	movs	r2, #0
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	f000 f92f 	bl	80031ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f70:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <HAL_InitTick+0x5c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_IncTick+0x20>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_IncTick+0x24>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_IncTick+0x24>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	200009b4 	.word	0x200009b4

08002fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return uwTick;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_GetTick+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200009b4 	.word	0x200009b4

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff ffee 	bl	8002fb8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_Delay+0x44>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ff6:	bf00      	nop
 8002ff8:	f7ff ffde 	bl	8002fb8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000008 	.word	0x20000008

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	; (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db0a      	blt.n	80030e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	490c      	ldr	r1, [pc, #48]	; (8003104 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	440b      	add	r3, r1
 80030dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e0:	e00a      	b.n	80030f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4908      	ldr	r1, [pc, #32]	; (8003108 <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	761a      	strb	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf28      	it	cs
 800312a:	2304      	movcs	r3, #4
 800312c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3304      	adds	r3, #4
 8003132:	2b06      	cmp	r3, #6
 8003134:	d902      	bls.n	800313c <NVIC_EncodePriority+0x30>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3b03      	subs	r3, #3
 800313a:	e000      	b.n	800313e <NVIC_EncodePriority+0x32>
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43d9      	mvns	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	4313      	orrs	r3, r2
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003184:	d301      	bcc.n	800318a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003186:	2301      	movs	r3, #1
 8003188:	e00f      	b.n	80031aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <SysTick_Config+0x40>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003192:	210f      	movs	r1, #15
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	f7ff ff8e 	bl	80030b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <SysTick_Config+0x40>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <SysTick_Config+0x40>)
 80031a4:	2207      	movs	r2, #7
 80031a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	e000e010 	.word	0xe000e010

080031b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff29 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e0:	f7ff ff3e 	bl	8003060 <__NVIC_GetPriorityGrouping>
 80031e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff8e 	bl	800310c <NVIC_EncodePriority>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5d 	bl	80030b8 <__NVIC_SetPriority>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff31 	bl	800307c <__NVIC_EnableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ffa2 	bl	8003174 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff feb6 	bl	8002fb8 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e099      	b.n	800338c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003278:	e00f      	b.n	800329a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327a:	f7ff fe9d 	bl	8002fb8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b05      	cmp	r3, #5
 8003286:	d908      	bls.n	800329a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e078      	b.n	800338c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e8      	bne.n	800327a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_DMA_Init+0x158>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4313      	orrs	r3, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b04      	cmp	r3, #4
 800332c:	d117      	bne.n	800335e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fb01 	bl	8003948 <DMA_CheckFifoParam>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800335a:	2301      	movs	r3, #1
 800335c:	e016      	b.n	800338c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fab8 	bl	80038dc <DMA_CalcBaseAndBitshift>
 800336c:	4603      	mov	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	223f      	movs	r2, #63	; 0x3f
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	f010803f 	.word	0xf010803f

08003398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_DMA_Start_IT+0x26>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e040      	b.n	8003440 <HAL_DMA_Start_IT+0xa8>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d12f      	bne.n	8003432 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa4a 	bl	8003880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	223f      	movs	r2, #63	; 0x3f
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0216 	orr.w	r2, r2, #22
 8003406:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0208 	orr.w	r2, r2, #8
 800341e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e005      	b.n	800343e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003456:	f7ff fdaf 	bl	8002fb8 <HAL_GetTick>
 800345a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d008      	beq.n	800347a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e052      	b.n	8003520 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0216 	bic.w	r2, r2, #22
 8003488:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <HAL_DMA_Abort+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0208 	bic.w	r2, r2, #8
 80034b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ca:	e013      	b.n	80034f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034cc:	f7ff fd74 	bl	8002fb8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d90c      	bls.n	80034f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2203      	movs	r2, #3
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e015      	b.n	8003520 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e4      	bne.n	80034cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	223f      	movs	r2, #63	; 0x3f
 8003508:	409a      	lsls	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d004      	beq.n	8003546 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e00c      	b.n	8003560 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2205      	movs	r2, #5
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003578:	4b92      	ldr	r3, [pc, #584]	; (80037c4 <HAL_DMA_IRQHandler+0x258>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a92      	ldr	r2, [pc, #584]	; (80037c8 <HAL_DMA_IRQHandler+0x25c>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0a9b      	lsrs	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003596:	2208      	movs	r2, #8
 8003598:	409a      	lsls	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2208      	movs	r2, #8
 80035c6:	409a      	lsls	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	2201      	movs	r2, #1
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	2201      	movs	r2, #1
 80035fc:	409a      	lsls	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	2204      	movs	r2, #4
 8003614:	409a      	lsls	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2204      	movs	r2, #4
 8003632:	409a      	lsls	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	f043 0204 	orr.w	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	2210      	movs	r2, #16
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d043      	beq.n	80036dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d03c      	beq.n	80036dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2210      	movs	r2, #16
 8003668:	409a      	lsls	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d108      	bne.n	800369c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d024      	beq.n	80036dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
 800369a:	e01f      	b.n	80036dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e016      	b.n	80036dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0208 	bic.w	r2, r2, #8
 80036ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2220      	movs	r2, #32
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 808e 	beq.w	800380a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8086 	beq.w	800380a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	2220      	movs	r2, #32
 8003704:	409a      	lsls	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b05      	cmp	r3, #5
 8003714:	d136      	bne.n	8003784 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0216 	bic.w	r2, r2, #22
 8003724:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003734:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <HAL_DMA_IRQHandler+0x1da>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0208 	bic.w	r2, r2, #8
 8003754:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	223f      	movs	r2, #63	; 0x3f
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	2b00      	cmp	r3, #0
 8003778:	d07d      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
        }
        return;
 8003782:	e078      	b.n	8003876 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01c      	beq.n	80037cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d108      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d030      	beq.n	800380a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
 80037b0:	e02b      	b.n	800380a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d027      	beq.n	800380a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
 80037c2:	e022      	b.n	800380a <HAL_DMA_IRQHandler+0x29e>
 80037c4:	20000000 	.word	0x20000000
 80037c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0210 	bic.w	r2, r2, #16
 80037e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	d032      	beq.n	8003878 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d022      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2205      	movs	r2, #5
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	429a      	cmp	r2, r3
 8003840:	d307      	bcc.n	8003852 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f2      	bne.n	8003836 <HAL_DMA_IRQHandler+0x2ca>
 8003850:	e000      	b.n	8003854 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003852:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e000      	b.n	8003878 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003876:	bf00      	nop
    }
  }
}
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop

08003880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800389c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d108      	bne.n	80038c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038be:	e007      	b.n	80038d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3b10      	subs	r3, #16
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <DMA_CalcBaseAndBitshift+0x64>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <DMA_CalcBaseAndBitshift+0x68>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d909      	bls.n	800391e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	1d1a      	adds	r2, r3, #4
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	659a      	str	r2, [r3, #88]	; 0x58
 800391c:	e007      	b.n	800392e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003926:	f023 0303 	bic.w	r3, r3, #3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	aaaaaaab 	.word	0xaaaaaaab
 8003944:	08006520 	.word	0x08006520

08003948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11f      	bne.n	80039a2 <DMA_CheckFifoParam+0x5a>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d856      	bhi.n	8003a16 <DMA_CheckFifoParam+0xce>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <DMA_CheckFifoParam+0x28>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003981 	.word	0x08003981
 8003974:	08003993 	.word	0x08003993
 8003978:	08003981 	.word	0x08003981
 800397c:	08003a17 	.word	0x08003a17
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d046      	beq.n	8003a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003990:	e043      	b.n	8003a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800399a:	d140      	bne.n	8003a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a0:	e03d      	b.n	8003a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039aa:	d121      	bne.n	80039f0 <DMA_CheckFifoParam+0xa8>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d837      	bhi.n	8003a22 <DMA_CheckFifoParam+0xda>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <DMA_CheckFifoParam+0x70>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039cf 	.word	0x080039cf
 80039c0:	080039c9 	.word	0x080039c9
 80039c4:	080039e1 	.word	0x080039e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e030      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d025      	beq.n	8003a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039de:	e022      	b.n	8003a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ee:	e01c      	b.n	8003a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d903      	bls.n	80039fe <DMA_CheckFifoParam+0xb6>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d003      	beq.n	8003a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039fc:	e018      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      break;
 8003a02:	e015      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      break;
 8003a14:	e00b      	b.n	8003a2e <DMA_CheckFifoParam+0xe6>
      break;
 8003a16:	bf00      	nop
 8003a18:	e00a      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e008      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e006      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e004      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop

08003a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e16b      	b.n	8003d34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f040 815a 	bne.w	8003d2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d005      	beq.n	8003a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d130      	bne.n	8003af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 0201 	and.w	r2, r3, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d017      	beq.n	8003b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d123      	bne.n	8003b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	220f      	movs	r2, #15
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	69b9      	ldr	r1, [r7, #24]
 8003b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0203 	and.w	r2, r3, #3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80b4 	beq.w	8003d2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	4a5f      	ldr	r2, [pc, #380]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd6:	4b5d      	ldr	r3, [pc, #372]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be2:	4a5b      	ldr	r2, [pc, #364]	; (8003d50 <HAL_GPIO_Init+0x310>)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_GPIO_Init+0x314>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02b      	beq.n	8003c66 <HAL_GPIO_Init+0x226>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a51      	ldr	r2, [pc, #324]	; (8003d58 <HAL_GPIO_Init+0x318>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d025      	beq.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a50      	ldr	r2, [pc, #320]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01f      	beq.n	8003c5e <HAL_GPIO_Init+0x21e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4f      	ldr	r2, [pc, #316]	; (8003d60 <HAL_GPIO_Init+0x320>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d019      	beq.n	8003c5a <HAL_GPIO_Init+0x21a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4e      	ldr	r2, [pc, #312]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0x216>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4d      	ldr	r2, [pc, #308]	; (8003d68 <HAL_GPIO_Init+0x328>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <HAL_GPIO_Init+0x212>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4c      	ldr	r2, [pc, #304]	; (8003d6c <HAL_GPIO_Init+0x32c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4b      	ldr	r2, [pc, #300]	; (8003d70 <HAL_GPIO_Init+0x330>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_GPIO_Init+0x20a>
 8003c46:	2307      	movs	r3, #7
 8003c48:	e00e      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e00c      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e00a      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c52:	2305      	movs	r3, #5
 8003c54:	e008      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c56:	2304      	movs	r3, #4
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e004      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e002      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_GPIO_Init+0x228>
 8003c66:	2300      	movs	r3, #0
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	f002 0203 	and.w	r2, r2, #3
 8003c6e:	0092      	lsls	r2, r2, #2
 8003c70:	4093      	lsls	r3, r2
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c78:	4935      	ldr	r1, [pc, #212]	; (8003d50 <HAL_GPIO_Init+0x310>)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	3302      	adds	r3, #2
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c86:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003caa:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cda:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d28:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3301      	adds	r3, #1
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	f67f ae90 	bls.w	8003a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40013800 	.word	0x40013800
 8003d54:	40020000 	.word	0x40020000
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40021400 	.word	0x40021400
 8003d6c:	40021800 	.word	0x40021800
 8003d70:	40021c00 	.word	0x40021c00
 8003d74:	40013c00 	.word	0x40013c00

08003d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
 8003d84:	4613      	mov	r3, r2
 8003d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d88:	787b      	ldrb	r3, [r7, #1]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d94:	e003      	b.n	8003d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	041a      	lsls	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	619a      	str	r2, [r3, #24]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	041a      	lsls	r2, r3, #16
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43d9      	mvns	r1, r3
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	400b      	ands	r3, r1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e264      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfe:	4ba3      	ldr	r3, [pc, #652]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4ba0      	ldr	r3, [pc, #640]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b9d      	ldr	r3, [pc, #628]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b99      	ldr	r3, [pc, #612]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e23f      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x74>
 8003e46:	4b91      	ldr	r3, [pc, #580]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a90      	ldr	r2, [pc, #576]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b8b      	ldr	r3, [pc, #556]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a8a      	ldr	r2, [pc, #552]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a87      	ldr	r2, [pc, #540]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e78:	4b84      	ldr	r3, [pc, #528]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a83      	ldr	r2, [pc, #524]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a80      	ldr	r2, [pc, #512]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7ff f88e 	bl	8002fb8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7ff f88a 	bl	8002fb8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e204      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc0>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7ff f87a 	bl	8002fb8 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7ff f876 	bl	8002fb8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1f0      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b6c      	ldr	r3, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe8>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b62      	ldr	r3, [pc, #392]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c4      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b56      	ldr	r3, [pc, #344]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4952      	ldr	r1, [pc, #328]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <HAL_RCC_OscConfig+0x2b0>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7ff f82f 	bl	8002fb8 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7ff f82b 	bl	8002fb8 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a5      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4940      	ldr	r1, [pc, #256]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_OscConfig+0x2b0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7ff f80e 	bl	8002fb8 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7ff f80a 	bl	8002fb8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e184      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b36      	ldr	r3, [pc, #216]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d030      	beq.n	800402c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCC_OscConfig+0x2b4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fe ffee 	bl	8002fb8 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fe ffea 	bl	8002fb8 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e164      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003ffe:	e015      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x2b4>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fe ffd7 	bl	8002fb8 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400e:	f7fe ffd3 	bl	8002fb8 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e14d      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a0 	beq.w	800417a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d121      	bne.n	80040ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <HAL_RCC_OscConfig+0x2b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <HAL_RCC_OscConfig+0x2b8>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7fe ff99 	bl	8002fb8 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e011      	b.n	80040ae <HAL_RCC_OscConfig+0x2ce>
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	42470000 	.word	0x42470000
 8004094:	42470e80 	.word	0x42470e80
 8004098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fe ff8c 	bl	8002fb8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e106      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <HAL_RCC_OscConfig+0x4e4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2f0>
 80040c2:	4b81      	ldr	r3, [pc, #516]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a80      	ldr	r2, [pc, #512]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	e01c      	b.n	800410a <HAL_RCC_OscConfig+0x32a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d10c      	bne.n	80040f2 <HAL_RCC_OscConfig+0x312>
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a7a      	ldr	r2, [pc, #488]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	e00b      	b.n	800410a <HAL_RCC_OscConfig+0x32a>
 80040f2:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fe ff51 	bl	8002fb8 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fe ff4d 	bl	8002fb8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0c5      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	4b65      	ldr	r3, [pc, #404]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ee      	beq.n	800411a <HAL_RCC_OscConfig+0x33a>
 800413c:	e014      	b.n	8004168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413e:	f7fe ff3b 	bl	8002fb8 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fe ff37 	bl	8002fb8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0af      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415c:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ee      	bne.n	8004146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d105      	bne.n	800417a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416e:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a55      	ldr	r2, [pc, #340]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 809b 	beq.w	80042ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d05c      	beq.n	800424a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d141      	bne.n	800421c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419e:	f7fe ff0b 	bl	8002fb8 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a6:	f7fe ff07 	bl	8002fb8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e081      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	019b      	lsls	r3, r3, #6
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	4937      	ldr	r1, [pc, #220]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ee:	4b37      	ldr	r3, [pc, #220]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fee0 	bl	8002fb8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe fedc 	bl	8002fb8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e056      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x41c>
 800421a:	e04e      	b.n	80042ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fe fec9 	bl	8002fb8 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422a:	f7fe fec5 	bl	8002fb8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e03f      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x44a>
 8004248:	e037      	b.n	80042ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e032      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d028      	beq.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d121      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d11a      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004286:	4013      	ands	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800428c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	3b01      	subs	r3, #1
 80042a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40007000 	.word	0x40007000
 80042c8:	40023800 	.word	0x40023800
 80042cc:	42470060 	.word	0x42470060

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7fe fdfa 	bl	8002fb8 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7fe fdf6 	bl	8002fb8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004456:	f000 f821 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fd5a 	bl	8002f30 <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	08006508 	.word	0x08006508
 8004494:	20000000 	.word	0x20000000
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	2300      	movs	r3, #0
 80044ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	4b67      	ldr	r3, [pc, #412]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x40>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	f200 80bd 	bhi.w	8004640 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ce:	e0b7      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044d2:	60bb      	str	r3, [r7, #8]
       break;
 80044d4:	e0b7      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044d8:	60bb      	str	r3, [r7, #8]
      break;
 80044da:	e0b4      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04d      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	461a      	mov	r2, r3
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	ea02 0800 	and.w	r8, r2, r0
 800450a:	ea03 0901 	and.w	r9, r3, r1
 800450e:	4640      	mov	r0, r8
 8004510:	4649      	mov	r1, r9
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	014b      	lsls	r3, r1, #5
 800451c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004520:	0142      	lsls	r2, r0, #5
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	ebb0 0008 	subs.w	r0, r0, r8
 800452a:	eb61 0109 	sbc.w	r1, r1, r9
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	018b      	lsls	r3, r1, #6
 8004538:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800453c:	0182      	lsls	r2, r0, #6
 800453e:	1a12      	subs	r2, r2, r0
 8004540:	eb63 0301 	sbc.w	r3, r3, r1
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	00d9      	lsls	r1, r3, #3
 800454e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004552:	00d0      	lsls	r0, r2, #3
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	eb12 0208 	adds.w	r2, r2, r8
 800455c:	eb43 0309 	adc.w	r3, r3, r9
 8004560:	f04f 0000 	mov.w	r0, #0
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	0259      	lsls	r1, r3, #9
 800456a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800456e:	0250      	lsls	r0, r2, #9
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	f7fc fa18 	bl	80009b4 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e04a      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	099b      	lsrs	r3, r3, #6
 8004594:	461a      	mov	r2, r3
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	ea02 0400 	and.w	r4, r2, r0
 80045a6:	ea03 0501 	and.w	r5, r3, r1
 80045aa:	4620      	mov	r0, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	014b      	lsls	r3, r1, #5
 80045b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045bc:	0142      	lsls	r2, r0, #5
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	1b00      	subs	r0, r0, r4
 80045c4:	eb61 0105 	sbc.w	r1, r1, r5
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	018b      	lsls	r3, r1, #6
 80045d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045d6:	0182      	lsls	r2, r0, #6
 80045d8:	1a12      	subs	r2, r2, r0
 80045da:	eb63 0301 	sbc.w	r3, r3, r1
 80045de:	f04f 0000 	mov.w	r0, #0
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	00d9      	lsls	r1, r3, #3
 80045e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ec:	00d0      	lsls	r0, r2, #3
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	1912      	adds	r2, r2, r4
 80045f4:	eb45 0303 	adc.w	r3, r5, r3
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0299      	lsls	r1, r3, #10
 8004602:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004606:	0290      	lsls	r0, r2, #10
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	461a      	mov	r2, r3
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	f7fc f9cc 	bl	80009b4 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	60bb      	str	r3, [r7, #8]
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004642:	60bb      	str	r3, [r7, #8]
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	68bb      	ldr	r3, [r7, #8]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	007a1200 	.word	0x007a1200

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff0 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0a9b      	lsrs	r3, r3, #10
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08006518 	.word	0x08006518

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffdc 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08006518 	.word	0x08006518

080046c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07b      	b.n	80047d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd fe84 	bl	8002428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	ea42 0103 	orr.w	r1, r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0104 	and.w	r1, r3, #4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0210 	and.w	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_SPI_TransmitReceive_DMA+0x20>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0e3      	b.n	80049c4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004812:	7dbb      	ldrb	r3, [r7, #22]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d00d      	beq.n	8004834 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481e:	d106      	bne.n	800482e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004828:	7dbb      	ldrb	r3, [r7, #22]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d002      	beq.n	8004834 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004832:	e0c2      	b.n	80049ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004840:	887b      	ldrh	r3, [r7, #2]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800484a:	e0b6      	b.n	80049ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b04      	cmp	r3, #4
 8004856:	d003      	beq.n	8004860 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2205      	movs	r2, #5
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	887a      	ldrh	r2, [r7, #2]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	887a      	ldrh	r2, [r7, #2]
 8004882:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d108      	bne.n	80048b4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	4a49      	ldr	r2, [pc, #292]	; (80049cc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	4a48      	ldr	r2, [pc, #288]	; (80049d0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80048b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80048b2:	e007      	b.n	80048c4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b8:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c0:	4a45      	ldr	r2, [pc, #276]	; (80049d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	4a44      	ldr	r2, [pc, #272]	; (80049dc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80048ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	2200      	movs	r2, #0
 80048d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	4619      	mov	r1, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80048ec:	f7fe fd54 	bl	8003398 <HAL_DMA_Start_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	f043 0210 	orr.w	r2, r3, #16
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800490e:	e054      	b.n	80049ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	2200      	movs	r2, #0
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	2200      	movs	r2, #0
 800492e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	2200      	movs	r2, #0
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	2200      	movs	r2, #0
 800493e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	4619      	mov	r1, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004956:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004958:	f7fe fd1e 	bl	8003398 <HAL_DMA_Start_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00c      	beq.n	800497c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800497a:	e01e      	b.n	80049ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d007      	beq.n	800499a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004998:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0202 	orr.w	r2, r2, #2
 80049b8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	08004d55 	.word	0x08004d55
 80049d0:	08004c1d 	.word	0x08004c1d
 80049d4:	08004d71 	.word	0x08004d71
 80049d8:	08004cc5 	.word	0x08004cc5
 80049dc:	08004d8d 	.word	0x08004d8d

080049e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10f      	bne.n	8004a24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
    return;
 8004a22:	e0d7      	b.n	8004bd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_SPI_IRQHandler+0x66>
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	09db      	lsrs	r3, r3, #7
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
    return;
 8004a44:	e0c6      	b.n	8004bd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_SPI_IRQHandler+0x8c>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80b4 	beq.w	8004bd4 <HAL_SPI_IRQHandler+0x1f4>
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80ad 	beq.w	8004bd4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d023      	beq.n	8004ace <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d011      	beq.n	8004ab6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	e00b      	b.n	8004ace <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]
        return;
 8004acc:	e082      	b.n	8004bd4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00c      	beq.n	8004b2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f043 0208 	orr.w	r2, r3, #8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d04f      	beq.n	8004bd2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_SPI_IRQHandler+0x17e>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d034      	beq.n	8004bc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0203 	bic.w	r2, r2, #3
 8004b6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_SPI_IRQHandler+0x1fc>)
 8004b7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fcd0 	bl	8003528 <HAL_DMA_Abort_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba6:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <HAL_SPI_IRQHandler+0x1fc>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fcba 	bl	8003528 <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004bc6:	e003      	b.n	8004bd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc fdbb 	bl	8001744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004bce:	e000      	b.n	8004bd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004bd0:	bf00      	nop
    return;
 8004bd2:	bf00      	nop
  }
}
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	08004dcd 	.word	0x08004dcd

08004be0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c2a:	f7fe f9c5 	bl	8002fb8 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3e:	d03b      	beq.n	8004cb8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0220 	bic.w	r2, r2, #32
 8004c4e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <SPI_DMAReceiveCplt+0x58>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c60:	d108      	bne.n	8004c74 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0203 	bic.w	r2, r2, #3
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	e007      	b.n	8004c84 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f93b 	bl	8004f04 <SPI_EndRxTransaction>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7fc fd47 	bl	8001744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004cb6:	e002      	b.n	8004cbe <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff ff91 	bl	8004be0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd2:	f7fe f971 	bl	8002fb8 <HAL_GetTick>
 8004cd6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce6:	d02f      	beq.n	8004d48 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0220 	bic.w	r2, r2, #32
 8004cf6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	2164      	movs	r1, #100	; 0x64
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f967 	bl	8004fd0 <SPI_EndRxTxTransaction>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0203 	bic.w	r2, r2, #3
 8004d22:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7fc fcff 	bl	8001744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d46:	e002      	b.n	8004d4e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7fc fd11 	bl	8001770 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ff46 	bl	8004bf4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff ff42 	bl	8004c08 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0203 	bic.w	r2, r2, #3
 8004da8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7fc fcc0 	bl	8001744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fc fcac 	bl	8001744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e04:	f7fe f8d8 	bl	8002fb8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4413      	add	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e14:	f7fe f8d0 	bl	8002fb8 <HAL_GetTick>
 8004e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	015b      	lsls	r3, r3, #5
 8004e20:	0d1b      	lsrs	r3, r3, #20
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2a:	e054      	b.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d050      	beq.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e34:	f7fe f8c0 	bl	8002fb8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d902      	bls.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d13d      	bne.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e62:	d111      	bne.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	d004      	beq.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d107      	bne.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e90:	d10f      	bne.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e017      	b.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d19b      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000000 	.word	0x20000000

08004f04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f18:	d111      	bne.n	8004f3e <SPI_EndRxTransaction+0x3a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f22:	d004      	beq.n	8004f2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2c:	d107      	bne.n	8004f3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f46:	d12a      	bne.n	8004f9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d012      	beq.n	8004f78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff ff49 	bl	8004df4 <SPI_WaitFlagStateUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02d      	beq.n	8004fc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e026      	b.n	8004fc6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2101      	movs	r1, #1
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff ff36 	bl	8004df4 <SPI_WaitFlagStateUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01a      	beq.n	8004fc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e013      	b.n	8004fc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff ff23 	bl	8004df4 <SPI_WaitFlagStateUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e000      	b.n	8004fc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <SPI_EndRxTxTransaction+0x7c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <SPI_EndRxTxTransaction+0x80>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	0d5b      	lsrs	r3, r3, #21
 8004fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fec:	fb02 f303 	mul.w	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ffa:	d112      	bne.n	8005022 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2200      	movs	r2, #0
 8005004:	2180      	movs	r1, #128	; 0x80
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff fef4 	bl	8004df4 <SPI_WaitFlagStateUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e00f      	b.n	8005042 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3b01      	subs	r3, #1
 800502c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d0f2      	beq.n	8005022 <SPI_EndRxTxTransaction+0x52>
 800503c:	e000      	b.n	8005040 <SPI_EndRxTxTransaction+0x70>
        break;
 800503e:	bf00      	nop
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000000 	.word	0x20000000
 8005050:	165e9f81 	.word	0x165e9f81

08005054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e03f      	b.n	80050e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fd fa8a 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 f835 	bl	8006108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b08a      	sub	sp, #40	; 0x28
 80050f2:	af02      	add	r7, sp, #8
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	603b      	str	r3, [r7, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b20      	cmp	r3, #32
 800510c:	d17c      	bne.n	8005208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_UART_Transmit+0x2c>
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e075      	b.n	800520a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_UART_Transmit+0x3e>
 8005128:	2302      	movs	r3, #2
 800512a:	e06e      	b.n	800520a <HAL_UART_Transmit+0x11c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2221      	movs	r2, #33	; 0x21
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005142:	f7fd ff39 	bl	8002fb8 <HAL_GetTick>
 8005146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515c:	d108      	bne.n	8005170 <HAL_UART_Transmit+0x82>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e003      	b.n	8005178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005180:	e02a      	b.n	80051d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fcf0 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e036      	b.n	800520a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	3302      	adds	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e007      	b.n	80051ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1cf      	bne.n	8005182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2140      	movs	r1, #64	; 0x40
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fcc0 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e006      	b.n	800520a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	; 0x30
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	4613      	mov	r3, r2
 8005220:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b20      	cmp	r3, #32
 800522c:	d165      	bne.n	80052fa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit_DMA+0x26>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e05e      	b.n	80052fc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UART_Transmit_DMA+0x38>
 8005248:	2302      	movs	r3, #2
 800524a:	e057      	b.n	80052fc <HAL_UART_Transmit_DMA+0xe8>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2221      	movs	r2, #33	; 0x21
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	4a22      	ldr	r2, [pc, #136]	; (8005304 <HAL_UART_Transmit_DMA+0xf0>)
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	4a21      	ldr	r2, [pc, #132]	; (8005308 <HAL_UART_Transmit_DMA+0xf4>)
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	4a20      	ldr	r2, [pc, #128]	; (800530c <HAL_UART_Transmit_DMA+0xf8>)
 800528a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	2200      	movs	r2, #0
 8005292:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005294:	f107 0308 	add.w	r3, r7, #8
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3304      	adds	r3, #4
 80052a8:	461a      	mov	r2, r3
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	f7fe f874 	bl	8003398 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	617b      	str	r3, [r7, #20]
   return(result);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e2:	627a      	str	r2, [r7, #36]	; 0x24
 80052e4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6a39      	ldr	r1, [r7, #32]
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e000      	b.n	80052fc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3730      	adds	r7, #48	; 0x30
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	080058cd 	.word	0x080058cd
 8005308:	08005967 	.word	0x08005967
 800530c:	08005adf 	.word	0x08005adf

08005310 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d11d      	bne.n	8005366 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_UART_Receive_DMA+0x26>
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e016      	b.n	8005368 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UART_Receive_DMA+0x38>
 8005344:	2302      	movs	r3, #2
 8005346:	e00f      	b.n	8005368 <HAL_UART_Receive_DMA+0x58>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	461a      	mov	r2, r3
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fc77 	bl	8005c50 <UART_Start_Receive_DMA>
 8005362:	4603      	mov	r3, r0
 8005364:	e000      	b.n	8005368 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b0ba      	sub	sp, #232	; 0xe8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_UART_IRQHandler+0x66>
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fddf 	bl	8005f92 <UART_Receive_IT>
      return;
 80053d4:	e256      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80de 	beq.w	800559c <HAL_UART_IRQHandler+0x22c>
 80053e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80d1 	beq.w	800559c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_UART_IRQHandler+0xae>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0201 	orr.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_UART_IRQHandler+0xd2>
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f043 0202 	orr.w	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_UART_IRQHandler+0xf6>
 800544e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f043 0204 	orr.w	r2, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d011      	beq.n	8005496 <HAL_UART_IRQHandler+0x126>
 8005472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800547e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0208 	orr.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 81ed 	beq.w	800587a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_UART_IRQHandler+0x14e>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fd6a 	bl	8005f92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <HAL_UART_IRQHandler+0x17a>
 80054e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d04f      	beq.n	800558a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fc72 	bl	8005dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d141      	bne.n	8005582 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3314      	adds	r3, #20
 8005526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800552a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800552e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1d9      	bne.n	80054fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	4a7d      	ldr	r2, [pc, #500]	; (800574c <HAL_UART_IRQHandler+0x3dc>)
 8005558:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	4618      	mov	r0, r3
 8005560:	f7fd ffe2 	bl	8003528 <HAL_DMA_Abort_IT>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d016      	beq.n	8005598 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	e00e      	b.n	8005598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc f890 	bl	80016a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e00a      	b.n	8005598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc f88c 	bl	80016a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e006      	b.n	8005598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc f888 	bl	80016a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005596:	e170      	b.n	800587a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	bf00      	nop
    return;
 800559a:	e16e      	b.n	800587a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	f040 814a 	bne.w	800583a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8143 	beq.w	800583a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 813c 	beq.w	800583a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e2:	2b40      	cmp	r3, #64	; 0x40
 80055e4:	f040 80b4 	bne.w	8005750 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8140 	beq.w	800587e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005606:	429a      	cmp	r2, r3
 8005608:	f080 8139 	bcs.w	800587e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005612:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561e:	f000 8088 	beq.w	8005732 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800564e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800565a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800567e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3314      	adds	r3, #20
 800568e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005692:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005696:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800569a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e1      	bne.n	800566e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e3      	bne.n	80056aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005714:	65ba      	str	r2, [r7, #88]	; 0x58
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800571a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e3      	bne.n	80056f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd fe8b 	bl	8003448 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800573a:	b29b      	uxth	r3, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	b29b      	uxth	r3, r3
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8b6 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005748:	e099      	b.n	800587e <HAL_UART_IRQHandler+0x50e>
 800574a:	bf00      	nop
 800574c:	08005e9b 	.word	0x08005e9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005758:	b29b      	uxth	r3, r3
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 808b 	beq.w	8005882 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800576c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8086 	beq.w	8005882 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800579a:	647a      	str	r2, [r7, #68]	; 0x44
 800579c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e3      	bne.n	8005776 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	623b      	str	r3, [r7, #32]
   return(result);
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057d2:	633a      	str	r2, [r7, #48]	; 0x30
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e3      	bne.n	80057ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	60fb      	str	r3, [r7, #12]
   return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005818:	61fa      	str	r2, [r7, #28]
 800581a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	617b      	str	r3, [r7, #20]
   return(result);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e3      	bne.n	80057f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800582c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f83e 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005838:	e023      	b.n	8005882 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HAL_UART_IRQHandler+0x4ea>
 8005846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fb35 	bl	8005ec2 <UART_Transmit_IT>
    return;
 8005858:	e014      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00e      	beq.n	8005884 <HAL_UART_IRQHandler+0x514>
 8005866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb75 	bl	8005f62 <UART_EndTransmit_IT>
    return;
 8005878:	e004      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
    return;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
      return;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
      return;
 8005882:	bf00      	nop
  }
}
 8005884:	37e8      	adds	r7, #232	; 0xe8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop

0800588c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b090      	sub	sp, #64	; 0x40
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d137      	bne.n	8005958 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80058e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ea:	2200      	movs	r2, #0
 80058ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
   return(result);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
 8005906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590e:	633a      	str	r2, [r7, #48]	; 0x30
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	330c      	adds	r3, #12
 8005928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	60fb      	str	r3, [r7, #12]
   return(result);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
 800593a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005942:	61fa      	str	r2, [r7, #28]
 8005944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	69b9      	ldr	r1, [r7, #24]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	617b      	str	r3, [r7, #20]
   return(result);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005956:	e002      	b.n	800595e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005958:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800595a:	f7fb fe09 	bl	8001570 <HAL_UART_TxCpltCallback>
}
 800595e:	bf00      	nop
 8005960:	3740      	adds	r7, #64	; 0x40
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff ff89 	bl	800588c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b09c      	sub	sp, #112	; 0x70
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	2b00      	cmp	r3, #0
 800599c:	d172      	bne.n	8005a84 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800599e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a0:	2200      	movs	r2, #0
 80059a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80059c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	667b      	str	r3, [r7, #100]	; 0x64
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059f8:	647a      	str	r2, [r7, #68]	; 0x44
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a22:	663b      	str	r3, [r7, #96]	; 0x60
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d119      	bne.n	8005a84 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a70:	61fa      	str	r2, [r7, #28]
 8005a72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a90:	4619      	mov	r1, r3
 8005a92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a94:	f7ff ff0e 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a98:	e002      	b.n	8005aa0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005a9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a9c:	f7fb fdaa 	bl	80015f4 <HAL_UART_RxCpltCallback>
}
 8005aa0:	bf00      	nop
 8005aa2:	3770      	adds	r7, #112	; 0x70
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d108      	bne.n	8005ad0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff fef3 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ace:	e002      	b.n	8005ad6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fee5 	bl	80058a0 <HAL_UART_RxHalfCpltCallback>
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b21      	cmp	r3, #33	; 0x21
 8005b10:	d108      	bne.n	8005b24 <UART_DMAError+0x46>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b1e:	68b8      	ldr	r0, [r7, #8]
 8005b20:	f000 f930 	bl	8005d84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b22      	cmp	r3, #34	; 0x22
 8005b44:	d108      	bne.n	8005b58 <UART_DMAError+0x7a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b52:	68b8      	ldr	r0, [r7, #8]
 8005b54:	f000 f93e 	bl	8005dd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	f043 0210 	orr.w	r2, r3, #16
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b64:	68b8      	ldr	r0, [r7, #8]
 8005b66:	f7fb fd9b 	bl	80016a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b090      	sub	sp, #64	; 0x40
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	e050      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d04c      	beq.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b92:	f7fd fa11 	bl	8002fb8 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d241      	bcs.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bc2:	637a      	str	r2, [r7, #52]	; 0x34
 8005bc4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e5      	bne.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3314      	adds	r3, #20
 8005bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	613b      	str	r3, [r7, #16]
   return(result);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf6:	623a      	str	r2, [r7, #32]
 8005bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	69f9      	ldr	r1, [r7, #28]
 8005bfc:	6a3a      	ldr	r2, [r7, #32]
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e5      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e00f      	b.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	bf0c      	ite	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	2300      	movne	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d09f      	beq.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3740      	adds	r7, #64	; 0x40
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b098      	sub	sp, #96	; 0x60
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2222      	movs	r2, #34	; 0x22
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	4a3e      	ldr	r2, [pc, #248]	; (8005d78 <UART_Start_Receive_DMA+0x128>)
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <UART_Start_Receive_DMA+0x12c>)
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <UART_Start_Receive_DMA+0x130>)
 8005c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	2200      	movs	r2, #0
 8005c96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c98:	f107 0308 	add.w	r3, r7, #8
 8005c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	f7fd fb72 	bl	8003398 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cf2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e5      	bne.n	8005cd2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3314      	adds	r3, #20
 8005d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d26:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3314      	adds	r3, #20
 8005d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d50:	653b      	str	r3, [r7, #80]	; 0x50
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d5a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6a39      	ldr	r1, [r7, #32]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3760      	adds	r7, #96	; 0x60
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08005983 	.word	0x08005983
 8005d7c:	08005aa9 	.word	0x08005aa9
 8005d80:	08005adf 	.word	0x08005adf

08005d84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b089      	sub	sp, #36	; 0x24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	61ba      	str	r2, [r7, #24]
 8005dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6979      	ldr	r1, [r7, #20]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005dc8:	bf00      	nop
 8005dca:	3724      	adds	r7, #36	; 0x24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b095      	sub	sp, #84	; 0x54
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dfc:	643a      	str	r2, [r7, #64]	; 0x40
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d119      	bne.n	8005e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	647b      	str	r3, [r7, #68]	; 0x44
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e6c:	61ba      	str	r2, [r7, #24]
 8005e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e8e:	bf00      	nop
 8005e90:	3754      	adds	r7, #84	; 0x54
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7fb fbf3 	bl	80016a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b21      	cmp	r3, #33	; 0x21
 8005ed4:	d13e      	bne.n	8005f54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ede:	d114      	bne.n	8005f0a <UART_Transmit_IT+0x48>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d110      	bne.n	8005f0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005efc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	1c9a      	adds	r2, r3, #2
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	621a      	str	r2, [r3, #32]
 8005f08:	e008      	b.n	8005f1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6211      	str	r1, [r2, #32]
 8005f14:	781a      	ldrb	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10f      	bne.n	8005f50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb faf4 	bl	8001570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b08c      	sub	sp, #48	; 0x30
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b22      	cmp	r3, #34	; 0x22
 8005fa4:	f040 80ab 	bne.w	80060fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d117      	bne.n	8005fe2 <UART_Receive_IT+0x50>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d113      	bne.n	8005fe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe0:	e026      	b.n	8006030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff4:	d007      	beq.n	8006006 <UART_Receive_IT+0x74>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <UART_Receive_IT+0x82>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	e008      	b.n	8006026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006020:	b2da      	uxtb	r2, r3
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4619      	mov	r1, r3
 800603e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006040:	2b00      	cmp	r3, #0
 8006042:	d15a      	bne.n	80060fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0220 	bic.w	r2, r2, #32
 8006052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	2b01      	cmp	r3, #1
 8006082:	d135      	bne.n	80060f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	613b      	str	r3, [r7, #16]
   return(result);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060aa:	623a      	str	r2, [r7, #32]
 80060ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	69f9      	ldr	r1, [r7, #28]
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d10a      	bne.n	80060e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff fbe3 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
 80060ee:	e002      	b.n	80060f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fb fa7f 	bl	80015f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e002      	b.n	8006100 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3730      	adds	r7, #48	; 0x30
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	b09f      	sub	sp, #124	; 0x7c
 800610e:	af00      	add	r7, sp, #0
 8006110:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800611c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611e:	68d9      	ldr	r1, [r3, #12]
 8006120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	ea40 0301 	orr.w	r3, r0, r1
 8006128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800612a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	431a      	orrs	r2, r3
 8006134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	431a      	orrs	r2, r3
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800614c:	f021 010c 	bic.w	r1, r1, #12
 8006150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006156:	430b      	orrs	r3, r1
 8006158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006166:	6999      	ldr	r1, [r3, #24]
 8006168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	ea40 0301 	orr.w	r3, r0, r1
 8006170:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4bc5      	ldr	r3, [pc, #788]	; (800648c <UART_SetConfig+0x384>)
 8006178:	429a      	cmp	r2, r3
 800617a:	d004      	beq.n	8006186 <UART_SetConfig+0x7e>
 800617c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4bc3      	ldr	r3, [pc, #780]	; (8006490 <UART_SetConfig+0x388>)
 8006182:	429a      	cmp	r2, r3
 8006184:	d103      	bne.n	800618e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006186:	f7fe fa8b 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 800618a:	6778      	str	r0, [r7, #116]	; 0x74
 800618c:	e002      	b.n	8006194 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800618e:	f7fe fa73 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8006192:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619c:	f040 80b6 	bne.w	800630c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a2:	461c      	mov	r4, r3
 80061a4:	f04f 0500 	mov.w	r5, #0
 80061a8:	4622      	mov	r2, r4
 80061aa:	462b      	mov	r3, r5
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	6439      	str	r1, [r7, #64]	; 0x40
 80061b0:	415b      	adcs	r3, r3
 80061b2:	647b      	str	r3, [r7, #68]	; 0x44
 80061b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061b8:	1912      	adds	r2, r2, r4
 80061ba:	eb45 0303 	adc.w	r3, r5, r3
 80061be:	f04f 0000 	mov.w	r0, #0
 80061c2:	f04f 0100 	mov.w	r1, #0
 80061c6:	00d9      	lsls	r1, r3, #3
 80061c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061cc:	00d0      	lsls	r0, r2, #3
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	1911      	adds	r1, r2, r4
 80061d4:	6639      	str	r1, [r7, #96]	; 0x60
 80061d6:	416b      	adcs	r3, r5
 80061d8:	667b      	str	r3, [r7, #100]	; 0x64
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	461a      	mov	r2, r3
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	1891      	adds	r1, r2, r2
 80061e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80061e8:	415b      	adcs	r3, r3
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80061f4:	f7fa fbde 	bl	80009b4 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4ba5      	ldr	r3, [pc, #660]	; (8006494 <UART_SetConfig+0x38c>)
 80061fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	011e      	lsls	r6, r3, #4
 8006206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006208:	461c      	mov	r4, r3
 800620a:	f04f 0500 	mov.w	r5, #0
 800620e:	4622      	mov	r2, r4
 8006210:	462b      	mov	r3, r5
 8006212:	1891      	adds	r1, r2, r2
 8006214:	6339      	str	r1, [r7, #48]	; 0x30
 8006216:	415b      	adcs	r3, r3
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800621e:	1912      	adds	r2, r2, r4
 8006220:	eb45 0303 	adc.w	r3, r5, r3
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	f04f 0100 	mov.w	r1, #0
 800622c:	00d9      	lsls	r1, r3, #3
 800622e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006232:	00d0      	lsls	r0, r2, #3
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	1911      	adds	r1, r2, r4
 800623a:	65b9      	str	r1, [r7, #88]	; 0x58
 800623c:	416b      	adcs	r3, r5
 800623e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	461a      	mov	r2, r3
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	1891      	adds	r1, r2, r2
 800624c:	62b9      	str	r1, [r7, #40]	; 0x28
 800624e:	415b      	adcs	r3, r3
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006256:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800625a:	f7fa fbab 	bl	80009b4 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b8c      	ldr	r3, [pc, #560]	; (8006494 <UART_SetConfig+0x38c>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	; 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	3332      	adds	r3, #50	; 0x32
 8006276:	4a87      	ldr	r2, [pc, #540]	; (8006494 <UART_SetConfig+0x38c>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006284:	441e      	add	r6, r3
 8006286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006288:	4618      	mov	r0, r3
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	1894      	adds	r4, r2, r2
 8006294:	623c      	str	r4, [r7, #32]
 8006296:	415b      	adcs	r3, r3
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800629e:	1812      	adds	r2, r2, r0
 80062a0:	eb41 0303 	adc.w	r3, r1, r3
 80062a4:	f04f 0400 	mov.w	r4, #0
 80062a8:	f04f 0500 	mov.w	r5, #0
 80062ac:	00dd      	lsls	r5, r3, #3
 80062ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062b2:	00d4      	lsls	r4, r2, #3
 80062b4:	4622      	mov	r2, r4
 80062b6:	462b      	mov	r3, r5
 80062b8:	1814      	adds	r4, r2, r0
 80062ba:	653c      	str	r4, [r7, #80]	; 0x50
 80062bc:	414b      	adcs	r3, r1
 80062be:	657b      	str	r3, [r7, #84]	; 0x54
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	461a      	mov	r2, r3
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	61b9      	str	r1, [r7, #24]
 80062ce:	415b      	adcs	r3, r3
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80062da:	f7fa fb6b 	bl	80009b4 <__aeabi_uldivmod>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4b6c      	ldr	r3, [pc, #432]	; (8006494 <UART_SetConfig+0x38c>)
 80062e4:	fba3 1302 	umull	r1, r3, r3, r2
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	2164      	movs	r1, #100	; 0x64
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	3332      	adds	r3, #50	; 0x32
 80062f6:	4a67      	ldr	r2, [pc, #412]	; (8006494 <UART_SetConfig+0x38c>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	f003 0207 	and.w	r2, r3, #7
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4432      	add	r2, r6
 8006308:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800630a:	e0b9      	b.n	8006480 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800630c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800630e:	461c      	mov	r4, r3
 8006310:	f04f 0500 	mov.w	r5, #0
 8006314:	4622      	mov	r2, r4
 8006316:	462b      	mov	r3, r5
 8006318:	1891      	adds	r1, r2, r2
 800631a:	6139      	str	r1, [r7, #16]
 800631c:	415b      	adcs	r3, r3
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006324:	1912      	adds	r2, r2, r4
 8006326:	eb45 0303 	adc.w	r3, r5, r3
 800632a:	f04f 0000 	mov.w	r0, #0
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	00d9      	lsls	r1, r3, #3
 8006334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006338:	00d0      	lsls	r0, r2, #3
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	eb12 0804 	adds.w	r8, r2, r4
 8006342:	eb43 0905 	adc.w	r9, r3, r5
 8006346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	008b      	lsls	r3, r1, #2
 800635a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800635e:	0082      	lsls	r2, r0, #2
 8006360:	4640      	mov	r0, r8
 8006362:	4649      	mov	r1, r9
 8006364:	f7fa fb26 	bl	80009b4 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4b49      	ldr	r3, [pc, #292]	; (8006494 <UART_SetConfig+0x38c>)
 800636e:	fba3 2302 	umull	r2, r3, r3, r2
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	011e      	lsls	r6, r3, #4
 8006376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006378:	4618      	mov	r0, r3
 800637a:	f04f 0100 	mov.w	r1, #0
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	1894      	adds	r4, r2, r2
 8006384:	60bc      	str	r4, [r7, #8]
 8006386:	415b      	adcs	r3, r3
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800638e:	1812      	adds	r2, r2, r0
 8006390:	eb41 0303 	adc.w	r3, r1, r3
 8006394:	f04f 0400 	mov.w	r4, #0
 8006398:	f04f 0500 	mov.w	r5, #0
 800639c:	00dd      	lsls	r5, r3, #3
 800639e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063a2:	00d4      	lsls	r4, r2, #3
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	1814      	adds	r4, r2, r0
 80063aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80063ac:	414b      	adcs	r3, r1
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f04f 0100 	mov.w	r1, #0
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	008b      	lsls	r3, r1, #2
 80063c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063c8:	0082      	lsls	r2, r0, #2
 80063ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80063ce:	f7fa faf1 	bl	80009b4 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <UART_SetConfig+0x38c>)
 80063d8:	fba3 1302 	umull	r1, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2164      	movs	r1, #100	; 0x64
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <UART_SetConfig+0x38c>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063f6:	441e      	add	r6, r3
 80063f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fa:	4618      	mov	r0, r3
 80063fc:	f04f 0100 	mov.w	r1, #0
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	1894      	adds	r4, r2, r2
 8006406:	603c      	str	r4, [r7, #0]
 8006408:	415b      	adcs	r3, r3
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006410:	1812      	adds	r2, r2, r0
 8006412:	eb41 0303 	adc.w	r3, r1, r3
 8006416:	f04f 0400 	mov.w	r4, #0
 800641a:	f04f 0500 	mov.w	r5, #0
 800641e:	00dd      	lsls	r5, r3, #3
 8006420:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006424:	00d4      	lsls	r4, r2, #3
 8006426:	4622      	mov	r2, r4
 8006428:	462b      	mov	r3, r5
 800642a:	eb12 0a00 	adds.w	sl, r2, r0
 800642e:	eb43 0b01 	adc.w	fp, r3, r1
 8006432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4618      	mov	r0, r3
 8006438:	f04f 0100 	mov.w	r1, #0
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	008b      	lsls	r3, r1, #2
 8006446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800644a:	0082      	lsls	r2, r0, #2
 800644c:	4650      	mov	r0, sl
 800644e:	4659      	mov	r1, fp
 8006450:	f7fa fab0 	bl	80009b4 <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <UART_SetConfig+0x38c>)
 800645a:	fba3 1302 	umull	r1, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2164      	movs	r1, #100	; 0x64
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	3332      	adds	r3, #50	; 0x32
 800646c:	4a09      	ldr	r2, [pc, #36]	; (8006494 <UART_SetConfig+0x38c>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 020f 	and.w	r2, r3, #15
 8006478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4432      	add	r2, r6
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	377c      	adds	r7, #124	; 0x7c
 8006484:	46bd      	mov	sp, r7
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	bf00      	nop
 800648c:	40011000 	.word	0x40011000
 8006490:	40011400 	.word	0x40011400
 8006494:	51eb851f 	.word	0x51eb851f

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4d0d      	ldr	r5, [pc, #52]	; (80064d0 <__libc_init_array+0x38>)
 800649c:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	2600      	movs	r6, #0
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	4d0b      	ldr	r5, [pc, #44]	; (80064d8 <__libc_init_array+0x40>)
 80064aa:	4c0c      	ldr	r4, [pc, #48]	; (80064dc <__libc_init_array+0x44>)
 80064ac:	f000 f820 	bl	80064f0 <_init>
 80064b0:	1b64      	subs	r4, r4, r5
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	2600      	movs	r6, #0
 80064b6:	42a6      	cmp	r6, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c0:	4798      	blx	r3
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ca:	4798      	blx	r3
 80064cc:	3601      	adds	r6, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	08006530 	.word	0x08006530
 80064d4:	08006530 	.word	0x08006530
 80064d8:	08006530 	.word	0x08006530
 80064dc:	08006534 	.word	0x08006534

080064e0 <memset>:
 80064e0:	4402      	add	r2, r0
 80064e2:	4603      	mov	r3, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <_init>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr

080064fc <_fini>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr
